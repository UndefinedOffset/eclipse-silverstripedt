/* The following code was generated by JFlex 1.2.2 on 6/11/12 8:23 PM */

/*******************************************************************************
 * Copyright (c) 2004, 2010 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

package ca.edchipman.silverstripepdt.parser;

import ca.edchipman.silverstripepdt.regions.SilverStripeRegionContext;

import java.io.CharArrayReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.wst.sse.core.internal.ltk.parser.BlockMarker;
import org.eclipse.wst.sse.core.internal.ltk.parser.BlockTokenizer;
import org.eclipse.wst.sse.core.internal.provisional.text.ITextRegion;
import org.eclipse.wst.sse.core.internal.util.Debug;
import org.eclipse.wst.sse.core.utils.StringUtils;
import org.eclipse.wst.xml.core.internal.Logger;
import org.eclipse.wst.xml.core.internal.parser.IntStack;
import org.eclipse.wst.xml.core.internal.parser.regions.XMLParserRegionFactory;
import org.eclipse.wst.xml.core.internal.regions.DOMRegionContext;


/**
 * This class is a scanner generated by 
 * <a href="http://www.informatik.tu-muenchen.de/~kleing/jflex/">JFlex</a> 1.2.2
 * on 6/11/12 8:23 PM from the specification file
 * <tt>file:/C:/Users/Ed Chipman/workspace/ca.edchipman.silverStripePDT/DevTimeSupport/SedModel/SSTokenizer/devel/SSTokenizer.jflex</tt>
 */
public class SSTokenizer implements BlockTokenizer, DOMRegionContext, SilverStripeRegionContext {

  /** this character denotes the end of file */
  final public static int YYEOF = -1;

  /** lexical states */
  final public static int ST_SS_UNCACHED_CONTENT = 50;
  final public static int ST_SS_WITH_END = 41;
  final public static int ST_XML_COMMENT_END = 4;
  final public static int ST_SS_COMMENT = 32;
  final public static int ST_BLOCK_TAG_SCAN = 30;
  final public static int ST_SS_CACHEBLOCK_CONTENT = 48;
  final public static int ST_SS_TEMPLATE_FUNCTION_CONTENT = 46;
  final public static int ST_DHTML_ATTRIBUTE_VALUE = 14;
  final public static int ST_XML_PI_ATTRIBUTE_NAME = 8;
  final public static int ST_DHTML_TAG_CLOSE = 15;
  final public static int ST_SS_TEMPLATE_FUNCTION_END = 47;
  final public static int ST_DHTML_EQUALS = 13;
  final public static int ST_XML_PI_ATTRIBUTE_VALUE = 10;
  final public static int ST_XML_ATTRIBUTE_VALUE = 19;
  final public static int ST_XML_ATTRIBUTE_NAME = 17;
  final public static int ST_XML_EQUALS = 18;
  final public static int YYINITIAL = 0;
  final public static int ST_XML_DOCTYPE_ID_SYSTEM = 25;
  final public static int ST_SS_LOOP_END = 43;
  final public static int ST_XML_ELEMENT_DECLARATION = 26;
  final public static int ST_XML_DECLARATION_CLOSE = 21;
  final public static int ST_SS_UNCACHED_END = 51;
  final public static int ST_SS_INCLUDE_CONTENT = 44;
  final public static int ST_SS_CONDITIONAL_END = 35;
  final public static int ST_SS_CONTROL_CONTENT = 38;
  final public static int ST_XML_DOCTYPE_DECLARATION = 22;
  final public static int ST_SS_I18N_CONTENT = 52;
  final public static int ST_CDATA_END = 2;
  final public static int ST_PI_WS = 6;
  final public static int ST_CDATA_TEXT = 1;
  final public static int ST_XML_ELEMENT_DECLARATION_CONTENT = 27;
  final public static int ST_SS_REQUIREMENT_CONTENT = 36;
  final public static int ST_SS_CACHEBLOCK_END = 49;
  final public static int ST_XML_ATTLIST_DECLARATION = 28;
  final public static int ST_SS_CONTROL_END = 39;
  final public static int ST_XML_PI_EQUALS = 9;
  final public static int ST_XML_ATTLIST_DECLARATION_CONTENT = 29;
  final public static int ST_XML_DOCTYPE_ID_PUBLIC = 24;
  final public static int ST_DHTML_ATTRIBUTE_NAME = 12;
  final public static int ST_SS_CONDITIONAL_CONTENT = 34;
  final public static int ST_SS_I18N_END = 53;
  final public static int ST_XML_DOCTYPE_EXTERNAL_ID = 23;
  final public static int ST_SS_WITH_CONTENT = 40;
  final public static int ST_SS = 31;
  final public static int ST_PI_CONTENT = 7;
  final public static int ST_SS_LOOP_CONTENT = 42;
  final public static int ST_SS_REQUIREMENT_END = 37;
  final public static int ST_PI = 5;
  final public static int ST_SS_COMMENT_END = 33;
  final public static int ST_XML_DECLARATION = 20;
  final public static int ST_XML_TAG_NAME = 16;
  final public static int ST_XML_PI_TAG_CLOSE = 11;
  final public static int ST_SS_INCLUDE_END = 45;
  final public static int ST_XML_COMMENT = 3;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\5\1\24\2\0\1\15\22\0\1\15\1\23\1\12\1\65"+
    "\1\106\1\20\1\13\1\14\1\62\1\22\1\17\1\17\1\64\1\7"+
    "\1\6\1\3\12\16\1\11\1\72\1\1\1\47\1\2\1\4\1\17"+
    "\1\36\1\74\1\34\1\35\1\53\1\70\1\40\1\40\1\60\1\40"+
    "\1\40\1\31\1\27\1\61\1\50\1\52\1\40\1\67\1\66\1\37"+
    "\1\71\2\40\1\25\1\51\1\40\1\33\1\0\1\21\1\0\1\10"+
    "\1\0\1\55\1\73\1\75\1\56\1\41\1\101\1\76\1\113\1\44"+
    "\1\40\1\115\1\32\1\30\1\46\1\45\1\114\1\110\1\42\1\43"+
    "\1\54\1\111\1\40\1\112\1\26\1\57\1\40\1\105\1\63\1\107"+
    "\1\0\70\102\1\104\10\102\27\103\1\102\37\103\1\102\10\103\62\77"+
    "\2\0\13\77\2\0\10\77\1\0\65\77\1\0\104\77\11\0\44\77"+
    "\3\0\2\77\4\0\36\77\70\0\131\77\22\0\7\77\16\0\2\100"+
    "\56\0\106\100\32\0\2\100\44\0\1\77\1\100\3\77\1\0\1\77"+
    "\1\0\24\77\1\0\54\77\1\0\7\77\3\0\1\77\1\0\1\77"+
    "\1\0\1\77\1\0\1\77\1\0\22\77\15\0\14\77\1\0\102\77"+
    "\1\0\14\77\1\0\44\77\1\0\4\100\11\0\65\77\2\0\2\77"+
    "\2\0\2\77\3\0\34\77\2\0\10\77\2\0\2\77\67\0\46\77"+
    "\2\0\1\77\7\0\46\77\12\0\21\100\1\0\27\100\1\0\3\100"+
    "\1\0\1\100\1\0\2\100\1\0\1\100\13\0\33\77\5\0\3\77"+
    "\56\0\32\77\5\0\1\100\12\77\10\100\15\0\12\100\6\0\1\100"+
    "\107\77\2\0\5\77\1\0\17\77\1\0\4\77\1\0\1\77\17\100"+
    "\2\77\2\100\1\0\4\100\2\0\12\100\u0207\0\3\100\1\0\65\77"+
    "\2\0\1\100\1\77\20\100\3\0\4\100\3\0\12\77\2\100\2\0"+
    "\12\100\21\0\3\100\1\0\10\77\2\0\2\77\2\0\26\77\1\0"+
    "\7\77\1\0\1\77\3\0\4\77\2\0\1\100\1\0\7\100\2\0"+
    "\2\100\2\0\3\100\11\0\1\100\4\0\2\77\1\0\3\77\2\100"+
    "\2\0\12\100\2\77\20\0\1\100\2\0\6\77\4\0\2\77\2\0"+
    "\26\77\1\0\7\77\1\0\2\77\1\0\2\77\1\0\2\77\2\0"+
    "\1\100\1\0\5\100\4\0\2\100\2\0\3\100\13\0\4\77\1\0"+
    "\1\77\7\0\12\100\2\100\3\77\14\0\3\100\1\0\7\77\1\0"+
    "\1\77\1\0\3\77\1\0\26\77\1\0\7\77\1\0\2\77\1\0"+
    "\5\77\2\0\1\100\1\77\10\100\1\0\3\100\1\0\3\100\22\0"+
    "\1\77\5\0\12\100\21\0\3\100\1\0\10\77\2\0\2\77\2\0"+
    "\26\77\1\0\7\77\1\0\2\77\2\0\4\77\2\0\1\100\1\77"+
    "\6\100\3\0\2\100\2\0\3\100\10\0\2\100\4\0\2\77\1\0"+
    "\3\77\4\0\12\100\22\0\2\100\1\0\6\77\3\0\3\77\1\0"+
    "\4\77\3\0\2\77\1\0\1\77\1\0\2\77\3\0\2\77\3\0"+
    "\3\77\3\0\10\77\1\0\3\77\4\0\5\100\3\0\3\100\1\0"+
    "\4\100\11\0\1\100\17\0\11\100\21\0\3\100\1\0\10\77\1\0"+
    "\3\77\1\0\27\77\1\0\12\77\1\0\5\77\4\0\7\100\1\0"+
    "\3\100\1\0\4\100\7\0\2\100\11\0\2\77\4\0\12\100\22\0"+
    "\2\100\1\0\10\77\1\0\3\77\1\0\27\77\1\0\12\77\1\0"+
    "\5\77\4\0\7\100\1\0\3\100\1\0\4\100\7\0\2\100\7\0"+
    "\1\77\1\0\2\77\4\0\12\100\22\0\2\100\1\0\10\77\1\0"+
    "\3\77\1\0\27\77\1\0\20\77\4\0\6\100\2\0\3\100\1\0"+
    "\4\100\11\0\1\100\10\0\2\77\4\0\12\100\221\0\56\77\1\0"+
    "\1\77\1\100\2\77\7\100\5\0\6\77\1\100\10\100\1\0\12\100"+
    "\47\0\2\77\1\0\1\77\2\0\2\77\1\0\1\77\2\0\1\77"+
    "\6\0\4\77\1\0\7\77\1\0\3\77\1\0\1\77\1\0\1\77"+
    "\2\0\2\77\1\0\2\77\1\0\1\77\1\100\2\77\6\100\1\0"+
    "\2\100\1\77\2\0\5\77\1\0\1\100\1\0\6\100\2\0\12\100"+
    "\76\0\2\100\6\0\12\100\13\0\1\100\1\0\1\100\1\0\1\100"+
    "\4\0\2\100\10\77\1\0\41\77\7\0\24\100\1\0\6\100\4\0"+
    "\6\100\1\0\1\100\1\0\25\100\3\0\7\100\1\0\1\100\346\0"+
    "\46\77\12\0\47\77\11\0\1\77\1\0\2\77\1\0\3\77\1\0"+
    "\1\77\1\0\2\77\1\0\5\77\51\0\1\77\1\0\1\77\1\0"+
    "\1\77\13\0\1\77\1\0\1\77\1\0\1\77\3\0\2\77\3\0"+
    "\1\77\5\0\3\77\1\0\1\77\1\0\1\77\1\0\1\77\1\0"+
    "\1\77\3\0\2\77\3\0\2\77\1\0\1\77\50\0\1\77\11\0"+
    "\1\77\2\0\1\77\2\0\2\77\7\0\2\77\1\0\1\77\1\0"+
    "\7\77\50\0\1\77\4\0\1\77\10\0\1\77\u0c06\0\234\77\4\0"+
    "\132\77\6\0\26\77\2\0\6\77\2\0\46\77\2\0\6\77\2\0"+
    "\10\77\1\0\1\77\1\0\1\77\1\0\1\77\1\0\37\77\2\0"+
    "\65\77\1\0\7\77\1\0\1\77\3\0\3\77\1\0\7\77\3\0"+
    "\4\77\2\0\6\77\4\0\15\77\5\0\3\77\1\0\7\77\323\0"+
    "\15\100\4\0\1\100\104\0\1\77\3\0\2\77\2\0\1\77\121\0"+
    "\3\77\u0e82\0\1\100\1\0\1\77\31\0\11\77\6\100\1\0\5\100"+
    "\13\0\124\77\4\0\2\100\2\0\2\100\2\0\132\77\1\0\3\100"+
    "\6\0\50\77\u1cd3\0\u51a6\77\u0c5a\0\u2ba4\77\134\0\u0800\0\u1ffe\0\2\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    78,   156,   234,   312,   390,   468,   546,   624,   702, 
      780,   858,   936,  1014,  1092,  1170,  1248,  1326,  1404,  1482, 
     1560,  1638,  1716,  1794,  1872,  1950,  2028,  2106,  2184,  2262, 
     2340,  2418,  2496,  2574,  2652,  2730,  2808,  2886,  2964,  3042, 
     3120,  3198,  3276,  3354,  3432,  3510,  3588,  3666,  3744,  3822, 
     3900,  3978,  4056,  4134,  4212,  4290,  4368,  4446,  4524,  4602, 
     4680,  4524,  4758,  4602,  4680,  4758,  4836,  4524,  4524,  4758, 
     4914,  4992,  5070,  5148,  5226,  5304,  5382,  5460,  4524,  4758, 
     5538,  5616,  5694,  4524,  5772,  5772,  5850,  5928,  6006,  5538, 
     4524,  6084,  6162,  6240,  4524,  6318,  6396,  6474,  6552,  6630, 
     6708,  4524,  6786,  6864,  6942,  7020,  7098,  7176,  7254,  7332, 
     4524,  7410,  7488,  7566,  7644,  7722,  7800,  7878,  7956,  4524, 
     8034,  8112,  8190,  8268,  8346,  8424,  8502,  8580,  8580,  8658, 
     8736,  8814,  8892,  8892,  8970,  9048,  9126,  9204,  9204,  9282, 
     9360,  9438,  9516,  4524,  9594,  9594,  9672,  9750,  9828,  9906, 
     4524,  4524,  4758,  9984, 10062, 10140, 10218, 10296, 10374,  9984, 
    10452, 10530, 10608, 10686,  4524,  4758, 10764,  4524,  4758, 10842, 
     4524,  4758, 10920,  4524,  4758, 10998,  4524,  4758, 11076,  4524, 
     4758, 11154,  4524,  4758, 11232,  4524,  4758, 11310,  4524,  4758, 
    11388,  4524,  4758, 11466,  4524,  4758, 11544,  4524,  4524, 11622, 
    11700, 11778, 11856, 11934,  4524, 12012, 12090, 12168, 12246, 12324, 
    12402, 12480,  4524, 12558, 12636, 12714,  4524,  4524,  5772, 12792, 
     5928,  4524, 12870,  6006,  6084, 11622,  6318,  6396, 12948,  6474, 
     4524, 13026,  6552,  4524, 13104, 13182,  7410, 13260,  7566,  4524, 
    13338,  7644, 13416, 13494, 11700, 13572, 13650, 13728,  8268,  4524, 
    13806, 13884,  8580, 13962,  8658,  4524, 14040, 14118, 14196, 14196, 
    14274, 14352,  8814,  8580,  8892, 14430,  8970,  4524, 14508,  9048, 
     9126,  8892,  9204, 14586,  9282,  4524, 14664, 14742, 14820, 14820, 
    14898, 14976, 15054,  9594, 15132,  9672,  4524, 15210, 15288, 15366, 
    15366, 15444, 15522, 15600,  9984,  4524,  4524, 15678, 15756, 15834, 
    15912, 15990,  9984, 16068, 16146, 16224, 16302, 16380, 16458,  4524, 
     4524,  4524,  4524,  4524,  4524,  4524,  4524,  4524,  4524, 16536, 
    16614, 16692, 16770, 16848, 16926,  4524, 17004, 17082,  4524, 17160, 
    17238, 17316,  4524,  4524,  5148, 17394, 17472, 17550, 17628, 17706, 
    17784, 17862, 17940, 18018, 18096, 18174, 18252, 18330, 14040, 18408, 
    18408, 14664, 18486, 18486, 18564, 15210, 18642, 18642, 18720, 18798, 
    18876, 18954, 19032, 19110, 19188, 19266, 19344, 19422, 19500, 19578, 
     4524,  4524, 19656, 19734,  4524, 19812, 19890, 19968,  4524, 20046, 
    20124, 20202, 20280, 20358, 20436, 20514, 20592, 20670, 20748, 20826, 
    20826, 20904, 20982, 21060, 21138, 21216, 14274, 14898, 21294, 15444, 
    21372,  9984, 21450, 21528, 21606, 21684, 21762, 21840, 21918, 21996, 
     9984,  4524, 22074, 22152, 22230, 22308, 22386, 22464, 22542, 22620, 
    22698, 22776, 22854, 22932, 23010, 23088, 23166, 23244, 23322, 23400, 
    23400, 23478, 23556, 23556, 23634, 23712, 23790, 23868, 23946, 24024, 
    24102, 24180, 24258, 24336, 24414, 24492, 24570, 24648, 24726, 24804, 
    24882, 24960, 25038, 25116, 25194, 25272, 25350, 25428, 22308, 25506, 
    25584, 25662, 25740, 25818, 25896, 25974, 26052, 26130, 26208, 26286, 
    26364, 26442, 26520, 26598, 26598, 26676, 26754, 26754, 26832, 26910, 
    26988,  4524,  4524, 27066, 27144, 27222, 27300,  9984, 27378, 27456, 
    27534, 27612, 27690, 27768, 27846, 27924,  9984, 28002, 28080, 28158, 
    28236, 28314, 28392, 25662, 28470, 25584, 28548, 28626, 28704, 28782, 
    28860, 28938, 28938, 29016,  7410,  4524,  4524,  4524, 29094, 29172, 
    29250, 29328, 29406, 29484, 29562,  9984,  9984, 29640,  9984, 29718, 
    29796, 29874, 29952, 30030, 30108, 30186, 30186, 30264, 30342,  9984, 
    30420, 30498, 30576,  9984,  9984, 30654,  9984,  4524, 30732,  9438, 
     9828, 30810, 30888, 30966, 31044, 31122, 31200,  9984, 31278, 31356, 
    31434,  9984, 31512, 31590, 31668, 31746,  9984, 31824, 31902,  5148
  };

  /** 
   * The packed transition table of the DFA
   */
  final private static String yy_packed = 
    "\1\67\1\70\11\67\1\71\4\67\1\72\42\67\1\73"+
    "\21\67\1\74\1\75\7\67\1\76\1\77\103\76\1\100"+
    "\1\101\7\76\1\73\1\102\17\73\1\103\2\73\1\104"+
    "\71\73\1\105\1\106\114\105\1\73\1\102\5\73\1\107"+
    "\14\73\1\104\72\73\1\102\2\73\1\110\1\111\2\73"+
    "\2\112\3\73\1\111\6\73\1\111\1\113\1\114\4\112"+
    "\1\73\10\112\1\115\2\112\1\73\10\112\1\115\1\112"+
    "\4\73\4\112\1\73\5\112\1\73\1\112\1\73\1\112"+
    "\4\73\6\112\1\73\1\102\2\73\1\110\1\116\7\73"+
    "\1\116\6\73\1\116\71\73\1\117\1\120\2\117\1\121"+
    "\17\117\1\104\71\117\1\73\1\102\2\73\1\122\1\111"+
    "\2\73\2\123\3\73\1\111\6\73\1\111\6\123\1\73"+
    "\13\123\1\73\12\123\4\73\4\123\1\73\5\123\1\73"+
    "\1\123\1\73\1\123\4\73\6\123\1\73\1\102\2\73"+
    "\1\122\1\111\2\73\2\123\3\73\1\111\6\73\1\111"+
    "\6\123\1\73\13\123\1\124\12\123\4\73\4\123\1\73"+
    "\5\123\1\73\1\123\1\73\1\123\4\73\6\123\1\125"+
    "\1\102\1\73\1\126\1\127\1\111\4\125\1\130\1\125"+
    "\1\131\1\111\6\125\1\111\71\125\1\73\1\102\2\73"+
    "\1\132\17\73\1\104\72\73\1\102\1\133\1\134\1\73"+
    "\1\111\2\73\2\135\3\73\1\111\6\73\1\111\6\135"+
    "\1\73\13\135\1\73\12\135\4\73\4\135\1\73\5\135"+
    "\1\73\1\135\1\73\1\135\4\73\6\135\1\73\1\136"+
    "\1\133\1\134\1\73\1\111\2\73\2\135\3\73\1\111"+
    "\6\73\1\111\6\135\1\73\13\135\1\137\12\135\4\73"+
    "\4\135\1\73\5\135\1\73\1\135\1\73\1\135\4\73"+
    "\6\135\1\140\1\136\1\133\1\141\1\140\1\111\4\140"+
    "\1\142\1\140\1\143\1\111\6\140\1\111\71\140\1\73"+
    "\1\102\3\73\1\111\7\73\1\111\6\73\1\111\71\73"+
    "\1\144\1\145\1\146\1\147\4\144\2\150\6\144\1\151"+
    "\4\144\6\152\1\144\13\152\1\144\12\152\4\144\4\152"+
    "\1\144\5\152\1\144\1\152\1\144\1\152\1\144\1\153"+
    "\1\154\1\144\6\152\1\73\1\145\1\146\1\147\1\73"+
    "\1\111\2\73\2\155\3\73\1\111\2\73\1\156\3\73"+
    "\1\111\6\155\1\73\13\155\1\73\12\155\4\73\4\155"+
    "\1\73\5\155\1\73\1\155\1\73\1\155\1\73\1\74"+
    "\1\75\1\73\6\155\1\73\1\145\1\146\1\147\1\73"+
    "\1\111\2\73\2\155\3\73\1\111\2\73\1\156\3\73"+
    "\1\111\6\155\1\73\13\155\1\157\12\155\4\73\4\155"+
    "\1\73\5\155\1\73\1\155\1\73\1\155\1\73\1\74"+
    "\1\75\1\73\6\155\1\160\1\145\1\146\1\161\1\160"+
    "\1\111\4\160\1\162\1\160\1\163\1\111\2\160\1\164"+
    "\3\160\1\111\60\160\1\165\1\166\7\160\1\73\1\167"+
    "\1\170\2\73\1\111\7\73\1\111\2\73\1\156\3\73"+
    "\1\111\10\73\1\171\1\172\2\73\1\173\11\73\1\173"+
    "\1\73\1\172\1\171\26\73\1\74\1\75\10\73\1\102"+
    "\1\170\2\73\1\111\7\73\1\111\6\73\1\111\6\73"+
    "\1\174\63\73\1\102\1\170\2\73\1\111\2\73\2\175"+
    "\3\73\1\111\6\73\1\111\6\175\1\174\13\175\1\73"+
    "\12\175\4\73\4\175\1\73\5\175\1\73\1\175\1\73"+
    "\1\175\4\73\6\175\1\73\1\102\1\170\2\73\1\111"+
    "\7\73\1\111\6\73\1\111\6\73\1\174\7\73\1\176"+
    "\6\73\1\177\13\73\1\176\25\73\1\177\1\73\1\200"+
    "\1\102\1\170\1\201\1\200\1\111\4\200\1\202\1\200"+
    "\1\203\1\111\6\200\1\111\6\200\1\204\62\200\1\205"+
    "\1\102\1\170\1\206\1\205\1\111\4\205\1\207\1\205"+
    "\1\210\1\111\6\205\1\111\6\205\1\211\62\205\1\212"+
    "\1\102\1\170\1\213\1\212\1\111\4\212\1\214\1\212"+
    "\1\215\1\111\6\212\1\111\71\212\1\216\1\217\1\220"+
    "\113\216\1\221\1\102\1\170\1\222\1\221\1\111\4\221"+
    "\1\223\1\221\1\224\1\111\6\221\1\111\71\221\1\225"+
    "\1\226\1\227\113\225\1\230\1\231\114\230\1\73\1\102"+
    "\6\73\1\232\7\73\1\233\3\73\1\104\5\232\1\234"+
    "\1\73\5\232\1\235\1\236\1\232\1\237\2\232\1\73"+
    "\4\232\1\240\5\232\4\73\4\232\1\73\1\241\1\232"+
    "\1\242\1\232\2\73\4\232\3\73\1\232\1\243\1\244"+
    "\3\232\1\245\1\246\114\245\1\73\1\102\5\73\1\247"+
    "\14\73\1\104\71\73\1\250\1\251\22\250\1\104\71\250"+
    "\1\73\1\102\16\73\1\252\3\73\1\104\71\73\1\253"+
    "\1\254\22\253\1\104\71\253\1\73\1\102\16\73\1\255"+
    "\3\73\1\104\71\73\1\256\1\257\22\256\1\104\71\256"+
    "\1\73\1\102\16\73\1\260\3\73\1\104\71\73\1\261"+
    "\1\262\22\261\1\104\71\261\1\73\1\102\16\73\1\263"+
    "\3\73\1\104\71\73\1\264\1\265\22\264\1\104\71\264"+
    "\1\73\1\102\16\73\1\266\3\73\1\104\71\73\1\267"+
    "\1\270\22\267\1\104\71\267\1\73\1\102\16\73\1\271"+
    "\3\73\1\104\71\73\1\272\1\273\22\272\1\104\71\272"+
    "\1\73\1\102\16\73\1\274\3\73\1\104\71\73\1\275"+
    "\1\276\22\275\1\104\71\275\1\73\1\102\16\73\1\277"+
    "\3\73\1\104\71\73\1\300\1\301\22\300\1\104\71\300"+
    "\1\73\1\102\16\73\1\302\3\73\1\104\71\73\1\303"+
    "\1\304\22\303\1\104\71\303\1\73\1\102\16\73\1\305"+
    "\3\73\1\104\71\73\1\67\1\0\11\67\1\0\4\67"+
    "\1\0\42\67\1\0\21\67\2\0\7\67\3\0\1\306"+
    "\1\307\13\0\1\310\2\0\1\311\77\0\1\312\2\0"+
    "\2\313\3\0\1\312\6\0\1\312\6\313\1\0\13\313"+
    "\1\0\12\313\3\0\1\314\4\313\1\0\5\313\1\0"+
    "\1\313\1\0\1\313\4\0\6\313\2\0\1\315\2\0"+
    "\1\312\2\0\2\316\3\0\1\312\2\0\1\317\3\0"+
    "\1\312\6\316\1\0\13\316\1\0\12\316\4\0\4\316"+
    "\1\0\5\316\1\0\1\316\1\0\1\316\4\0\6\316"+
    "\224\0\1\320\17\0\1\321\14\0\6\321\1\0\13\321"+
    "\1\0\12\321\4\0\4\321\1\0\4\321\2\0\1\321"+
    "\6\0\6\321\23\0\1\322\113\0\1\323\103\0\1\324"+
    "\110\0\1\325\120\0\1\111\7\0\1\111\6\0\1\111"+
    "\77\0\4\112\4\0\1\112\6\0\6\112\1\0\13\112"+
    "\1\0\12\112\4\0\4\112\1\0\7\112\1\0\2\112"+
    "\3\0\6\112\6\0\4\112\4\0\1\112\6\0\2\112"+
    "\2\326\2\112\1\0\13\112\1\0\12\112\4\0\4\112"+
    "\1\0\7\112\1\0\2\112\3\0\6\112\6\0\4\112"+
    "\4\0\1\112\6\0\2\112\1\326\1\327\2\112\1\0"+
    "\13\112\1\0\12\112\4\0\4\112\1\0\7\112\1\0"+
    "\2\112\3\0\6\112\6\0\4\112\4\0\1\112\6\0"+
    "\2\112\2\330\2\112\1\0\13\112\1\0\12\112\4\0"+
    "\4\112\1\0\7\112\1\0\2\112\3\0\6\112\5\0"+
    "\1\116\7\0\1\116\6\0\1\116\73\0\1\331\115\0"+
    "\1\332\121\0\4\123\4\0\1\123\6\0\6\123\1\0"+
    "\13\123\1\0\12\123\4\0\4\123\1\0\7\123\1\0"+
    "\2\123\3\0\6\123\1\125\2\0\1\333\1\125\1\0"+
    "\4\125\1\0\1\125\2\0\6\125\1\0\72\125\1\0"+
    "\1\332\1\333\1\125\1\0\4\125\1\0\1\125\2\0"+
    "\6\125\1\0\71\125\1\130\2\334\1\335\1\130\1\334"+
    "\4\130\1\336\1\130\2\334\6\130\1\334\71\130\1\131"+
    "\2\337\1\340\1\131\1\337\4\131\1\337\1\131\1\336"+
    "\1\337\6\131\1\337\71\131\2\0\1\133\1\341\120\0"+
    "\4\135\4\0\1\135\6\0\6\135\1\0\13\135\1\0"+
    "\12\135\4\0\4\135\1\0\7\135\1\0\2\135\3\0"+
    "\6\135\20\0\1\342\2\0\1\322\72\0\1\140\2\0"+
    "\1\343\1\140\1\0\4\140\1\0\1\140\2\0\6\140"+
    "\1\0\72\140\1\0\1\133\1\344\1\140\1\0\4\140"+
    "\1\0\1\140\2\0\6\140\1\0\71\140\1\142\2\345"+
    "\1\346\1\142\1\345\4\142\1\347\1\142\2\345\6\142"+
    "\1\345\71\142\1\143\2\350\1\351\1\143\1\350\4\143"+
    "\1\350\1\143\1\347\1\350\6\143\1\350\71\143\1\144"+
    "\3\0\21\144\6\0\1\144\13\0\1\144\12\0\4\144"+
    "\4\0\1\144\5\0\1\144\1\0\1\144\1\0\4\144"+
    "\11\0\1\306\14\0\1\310\2\0\1\311\74\0\1\352"+
    "\113\0\1\144\3\0\2\144\4\150\4\144\1\150\6\144"+
    "\6\152\1\144\13\152\1\144\12\152\4\144\4\152\1\144"+
    "\5\152\1\150\1\152\1\144\1\152\1\150\3\144\6\152"+
    "\1\144\1\0\1\315\1\0\21\144\6\0\1\144\13\0"+
    "\1\144\12\0\4\144\4\0\1\144\5\0\1\144\1\0"+
    "\1\144\1\0\4\144\14\0\4\152\4\0\1\152\6\0"+
    "\6\152\1\0\13\152\1\0\12\152\4\0\4\152\1\0"+
    "\7\152\1\0\2\152\3\0\6\152\1\144\3\0\21\144"+
    "\6\0\1\144\13\0\1\144\12\0\4\144\4\0\1\144"+
    "\5\0\1\144\1\0\1\144\1\0\2\144\1\353\1\144"+
    "\6\0\1\144\3\0\4\144\1\354\14\144\6\321\1\144"+
    "\13\321\1\144\12\321\4\144\4\321\1\144\4\321\1\0"+
    "\1\144\1\321\1\144\1\0\4\144\6\321\6\0\4\155"+
    "\4\0\1\155\6\0\6\155\1\0\13\155\1\0\12\155"+
    "\4\0\4\155\1\0\7\155\1\0\2\155\3\0\6\155"+
    "\2\0\1\315\113\0\1\160\2\0\1\355\1\160\1\0"+
    "\4\160\1\0\1\160\2\0\6\160\1\0\72\160\1\0"+
    "\1\352\1\355\1\160\1\0\4\160\1\0\1\160\2\0"+
    "\6\160\1\0\71\160\1\162\2\356\1\357\1\162\1\356"+
    "\4\162\1\360\1\162\2\356\6\162\1\356\71\162\1\163"+
    "\2\361\1\362\1\163\1\361\4\163\1\361\1\163\1\360"+
    "\1\361\6\163\1\361\71\163\1\160\1\0\1\315\1\355"+
    "\1\160\1\0\4\160\1\0\1\160\2\0\6\160\1\0"+
    "\72\160\2\0\1\355\1\160\1\0\4\160\1\0\1\160"+
    "\2\0\6\160\1\0\61\160\1\363\10\160\2\0\1\355"+
    "\1\160\1\0\2\160\1\364\1\160\1\0\1\160\2\0"+
    "\6\160\1\0\6\364\1\160\13\364\1\160\12\364\4\160"+
    "\4\364\1\160\4\364\2\160\1\364\6\160\6\364\3\0"+
    "\1\306\14\0\1\310\2\0\1\365\137\0\1\366\2\0"+
    "\1\366\104\0\1\367\14\0\1\367\72\0\2\370\63\0"+
    "\21\371\1\372\74\371\6\0\4\175\4\0\1\175\6\0"+
    "\6\175\1\0\13\175\1\0\12\175\4\0\4\175\1\0"+
    "\7\175\1\0\2\175\3\0\6\175\51\0\1\373\5\0"+
    "\1\373\127\0\1\374\17\0\1\374\4\0\1\200\2\0"+
    "\1\375\1\200\1\0\4\200\1\0\1\200\2\0\6\200"+
    "\1\0\71\200\1\202\2\376\1\377\1\202\1\376\4\202"+
    "\1\u0100\1\202\2\376\6\202\1\376\71\202\1\u0101\2\u0102"+
    "\1\u0103\1\u0104\1\u0102\4\u0104\1\u0102\1\u0101\1\u0105\1\u0106"+
    "\3\u0104\1\u0101\2\u0104\1\u0106\6\u0104\1\u0101\27\u0104\1\u0101"+
    "\13\u0104\2\u0101\1\u0104\4\u0101\1\u0104\1\u0101\6\u0104\1\204"+
    "\2\371\1\u0107\1\204\1\371\4\204\1\371\1\204\2\371"+
    "\3\204\1\u0108\2\204\1\371\71\204\1\205\2\0\1\u0109"+
    "\1\205\1\0\4\205\1\0\1\205\2\0\6\205\1\0"+
    "\71\205\1\207\2\u010a\1\u010b\1\207\1\u010a\4\207\1\u010c"+
    "\1\207\2\u010a\6\207\1\u010a\71\207\1\210\2\u010d\1\u010e"+
    "\1\210\1\u010d\4\210\1\u010d\1\210\1\u010c\1\u010d\6\210"+
    "\1\u010d\71\210\1\211\2\371\1\u010f\1\211\1\371\4\211"+
    "\1\371\1\211\2\371\3\211\1\u0110\2\211\1\371\71\211"+
    "\1\212\2\0\1\u0111\1\212\1\0\4\212\1\0\1\212"+
    "\2\0\6\212\1\0\71\212\1\214\2\u0112\1\u0113\1\214"+
    "\1\u0112\4\214\1\u0114\1\214\2\u0112\6\214\1\u0112\71\214"+
    "\1\u0115\2\u0116\1\u0117\1\u0118\1\u0116\4\u0118\1\u0116\1\u0115"+
    "\1\u0119\1\u011a\3\u0118\1\u0115\2\u0118\1\u011a\6\u0118\1\u0115"+
    "\27\u0118\1\u0115\13\u0118\2\u0115\1\u0118\4\u0115\1\u0118\1\u0115"+
    "\6\u0118\2\216\1\0\115\216\1\0\20\216\1\u011b\72\216"+
    "\1\221\2\0\1\u011c\1\221\1\0\4\221\1\0\1\221"+
    "\2\0\6\221\1\0\71\221\1\223\2\u011d\1\u011e\1\223"+
    "\1\u011d\4\223\1\u011f\1\223\2\u011d\6\223\1\u011d\71\223"+
    "\1\u0120\2\u0121\1\u0122\1\u0123\1\u0121\4\u0123\1\u0121\1\u0120"+
    "\1\u0124\1\u0125\3\u0123\1\u0120\2\u0123\1\u0125\6\u0123\1\u0120"+
    "\27\u0123\1\u0120\13\u0123\2\u0120\1\u0123\4\u0120\1\u0123\1\u0120"+
    "\6\u0123\2\225\1\0\115\225\1\0\20\225\1\u0126\72\225"+
    "\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0\13\u0127"+
    "\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0"+
    "\4\u0127\3\0\6\u0127\2\0\1\u0129\123\0\1\u0127\5\0"+
    "\1\u0127\6\0\6\u0127\1\0\11\u0127\1\u012a\1\u0127\1\0"+
    "\12\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127"+
    "\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0\5\u0127"+
    "\1\u012b\1\0\12\u0127\1\u012c\1\0\12\u0127\1\u0128\3\0"+
    "\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0\6\u0127\10\0"+
    "\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0\5\u0127\1\u012d"+
    "\5\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127"+
    "\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127"+
    "\6\0\6\u0127\1\0\12\u0127\1\u012e\1\0\12\u0127\1\u0128"+
    "\3\0\4\u0127\1\0\4\u0127\2\0\1\u012f\3\u0127\3\0"+
    "\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0"+
    "\13\u0127\1\0\5\u0127\1\u0130\4\u0127\1\u0128\3\0\4\u0127"+
    "\1\0\4\u0127\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127"+
    "\5\0\1\u0127\6\0\6\u0127\1\0\11\u0127\1\u0131\1\u0127"+
    "\1\0\5\u0127\1\u0132\4\u0127\1\u0128\3\0\4\u0127\1\0"+
    "\4\u0127\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127\5\0"+
    "\1\u0127\6\0\6\u0127\1\0\12\u0127\1\u0133\1\0\12\u0127"+
    "\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0"+
    "\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0"+
    "\10\u0127\1\u0134\2\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127"+
    "\1\0\4\u0127\2\0\4\u0127\3\0\6\u0127\7\0\1\u0135"+
    "\110\0\1\u0136\115\0\1\u0137\115\0\1\u0138\115\0\1\u0139"+
    "\115\0\1\u013a\115\0\1\u013b\115\0\1\u013c\115\0\1\u013d"+
    "\115\0\1\u013e\115\0\1\u013f\122\0\1\u0140\115\0\1\u0141"+
    "\23\0\1\u0142\67\0\1\312\2\0\2\u0143\3\0\1\312"+
    "\6\0\1\312\6\u0143\1\0\13\u0143\1\0\12\u0143\4\0"+
    "\4\u0143\1\0\5\u0143\1\0\1\u0143\1\0\1\u0143\4\0"+
    "\6\u0143\1\u0144\1\0\3\u0144\1\u0145\4\313\1\u0144\1\0"+
    "\1\u0144\1\u0145\1\313\1\u0144\1\0\3\u0144\1\u0145\6\313"+
    "\1\u0144\13\313\1\u0144\12\313\4\u0144\4\313\1\u0146\7\313"+
    "\1\u0144\2\313\3\u0144\6\313\16\0\1\u0147\7\0\1\u0148"+
    "\67\0\1\u0144\1\0\3\u0144\1\u0145\4\316\1\u0144\1\0"+
    "\1\u0144\1\u0145\1\316\1\u0144\1\0\3\u0144\1\u0145\6\316"+
    "\1\u0144\13\316\1\u0144\12\316\4\u0144\4\316\1\u0149\7\316"+
    "\1\u0144\2\316\3\u0144\6\316\20\0\1\317\105\0\1\u014a"+
    "\14\0\6\u014a\1\0\13\u014a\1\0\12\u014a\4\0\4\u014a"+
    "\1\0\4\u014a\2\0\1\u014a\6\0\6\u014a\6\0\1\u014b"+
    "\1\0\1\321\5\0\1\321\6\0\6\321\1\0\13\321"+
    "\1\0\12\321\1\u014c\3\0\4\321\1\0\4\321\2\0"+
    "\1\321\6\0\6\321\33\0\1\u0142\64\0\1\u014d\115\0"+
    "\1\u014e\121\0\4\112\4\0\1\112\6\0\4\112\2\u014f"+
    "\1\0\13\112\1\0\12\112\4\0\4\112\1\0\7\112"+
    "\1\0\2\112\3\0\6\112\6\0\4\112\4\0\1\112"+
    "\6\0\4\112\1\u014f\1\u0150\1\0\13\112\1\0\12\112"+
    "\4\0\4\112\1\0\7\112\1\0\2\112\3\0\6\112"+
    "\6\0\4\112\4\0\1\112\6\0\6\112\1\0\13\112"+
    "\1\0\2\112\1\u0151\7\112\4\0\4\112\1\0\7\112"+
    "\1\0\2\112\3\0\4\112\1\u0151\1\112\12\334\1\336"+
    "\103\334\14\337\1\336\101\337\12\345\1\347\103\345\14\350"+
    "\1\347\101\350\1\144\3\0\4\144\1\u0152\14\144\6\u014a"+
    "\1\144\13\u014a\1\144\12\u014a\4\144\4\u014a\1\144\4\u014a"+
    "\1\0\1\144\1\u014a\1\144\1\0\4\144\6\u014a\1\144"+
    "\3\0\2\144\1\u0153\1\144\1\354\5\144\1\354\6\144"+
    "\6\321\1\144\13\321\1\144\12\321\1\u0154\3\144\4\321"+
    "\1\144\4\321\1\0\1\144\1\321\1\144\1\0\4\144"+
    "\6\321\12\356\1\360\103\356\14\361\1\360\101\361\1\160"+
    "\2\0\1\355\1\160\1\0\2\160\1\u0155\1\160\1\0"+
    "\1\160\2\0\6\160\1\0\6\u0155\1\160\13\u0155\1\160"+
    "\12\u0155\4\160\4\u0155\1\160\4\u0155\2\160\1\u0155\6\160"+
    "\6\u0155\1\160\2\0\1\355\1\160\1\0\1\u0156\1\160"+
    "\1\364\1\160\1\0\1\160\2\0\1\364\5\160\1\0"+
    "\6\364\1\160\13\364\1\160\12\364\1\u0157\3\160\4\364"+
    "\1\160\4\364\2\160\1\364\6\160\6\364\34\0\1\u0158"+
    "\40\0\1\u0158\57\0\1\u0159\14\0\1\u0159\102\0\1\u015a"+
    "\11\0\1\u015a\105\0\1\u015b\22\0\1\u015b\122\0\2\u015c"+
    "\21\0\12\376\1\u0100\103\376\1\u0101\2\u0102\1\u015d\1\u0101"+
    "\1\u0102\4\u0101\1\u0102\1\u0101\1\u0100\1\u0102\6\u0101\1\u0102"+
    "\71\u0101\14\u0102\1\u0100\101\u0102\1\u0101\2\u0102\1\u015d\1\u0101"+
    "\1\u0102\4\u0101\1\u0102\1\u0101\1\u015e\1\u0102\6\u0101\1\u0102"+
    "\71\u0101\14\0\1\u015f\101\0\14\u0102\1\u015e\101\u0102\12\u010a"+
    "\1\u010c\103\u010a\14\u010d\1\u010c\101\u010d\12\u0112\1\u0114\103\u0112"+
    "\1\u0115\2\u0116\1\u0160\1\u0115\1\u0116\4\u0115\1\u0116\1\u0115"+
    "\1\u0114\1\u0116\6\u0115\1\u0116\71\u0115\14\u0116\1\u0114\101\u0116"+
    "\1\u0115\2\u0116\1\u0160\1\u0115\1\u0116\4\u0115\1\u0116\1\u0115"+
    "\1\u0161\1\u0116\6\u0115\1\u0116\71\u0115\14\0\1\u0162\101\0"+
    "\14\u0116\1\u0161\101\u0116\2\216\1\0\30\216\1\u0163\62\216"+
    "\12\u011d\1\u011f\103\u011d\1\u0120\2\u0121\1\u0164\1\u0120\1\u0121"+
    "\4\u0120\1\u0121\1\u0120\1\u011f\1\u0121\6\u0120\1\u0121\71\u0120"+
    "\14\u0121\1\u011f\101\u0121\1\u0120\2\u0121\1\u0164\1\u0120\1\u0121"+
    "\4\u0120\1\u0121\1\u0120\1\u0165\1\u0121\6\u0120\1\u0121\71\u0120"+
    "\14\0\1\u0166\101\0\14\u0121\1\u0165\101\u0121\2\225\1\0"+
    "\30\225\1\u0167\62\225\10\0\1\u0127\5\0\1\u0127\6\0"+
    "\6\u0127\1\0\11\u0127\1\u0168\1\u0127\1\0\12\u0127\1\u0128"+
    "\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0\6\u0127"+
    "\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0\7\u0127"+
    "\1\u0169\3\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0"+
    "\4\u0127\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127\5\0"+
    "\1\u0127\6\0\6\u0127\1\0\13\u0127\1\0\6\u0127\1\u016a"+
    "\3\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127"+
    "\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127"+
    "\1\0\13\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0"+
    "\4\u0127\2\0\4\u0127\3\0\1\u016b\5\u0127\10\0\1\u0127"+
    "\5\0\1\u0127\6\0\6\u0127\1\0\13\u0127\1\0\12\u0127"+
    "\1\u0128\3\0\4\u0127\1\0\2\u0127\1\u016c\1\u0127\2\0"+
    "\4\u0127\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0"+
    "\6\u0127\1\0\7\u0127\1\u016d\3\u0127\1\0\12\u0127\1\u0128"+
    "\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0\6\u0127"+
    "\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0\12\u0127"+
    "\1\u016e\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127"+
    "\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127"+
    "\6\0\6\u0127\1\0\13\u0127\1\0\12\u0127\1\u0128\3\0"+
    "\4\u0127\1\0\2\u0127\1\u016f\1\u0127\2\0\4\u0127\3\0"+
    "\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0"+
    "\13\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0\2\u0127"+
    "\1\u0170\1\u0127\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127"+
    "\5\0\1\u0127\6\0\6\u0127\1\0\13\u0127\1\0\4\u0127"+
    "\1\u0171\5\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0"+
    "\4\u0127\3\0\6\u0127\20\0\1\u0172\104\0\1\u0173\115\0"+
    "\1\u0174\142\0\1\u0175\61\0\1\u0143\1\0\11\u0143\1\0"+
    "\4\u0143\1\0\75\u0143\1\u0144\1\0\11\u0144\1\0\4\u0144"+
    "\1\0\51\u0144\1\0\24\u0144\1\0\3\u0144\1\u0145\5\u0144"+
    "\1\0\1\u0144\1\u0145\2\u0144\1\0\3\u0144\1\u0145\45\u0144"+
    "\1\u0176\23\u0144\16\0\1\u0147\53\0\1\u0177\41\0\1\u0178"+
    "\15\0\3\u0178\2\0\1\u0178\11\0\1\u0178\1\0\2\u0178"+
    "\11\0\1\u0178\2\0\3\u0178\3\0\1\u0178\22\0\1\u0179"+
    "\1\0\1\u014a\5\0\1\u014a\6\0\6\u014a\1\0\13\u014a"+
    "\1\0\12\u014a\1\u017a\3\0\4\u014a\1\0\4\u014a\2\0"+
    "\1\u014a\5\0\1\u017b\6\u014a\10\0\1\u017c\5\0\1\u017c"+
    "\6\0\6\u017c\1\0\13\u017c\1\0\12\u017c\4\0\4\u017c"+
    "\1\0\4\u017c\2\0\1\u017c\6\0\6\u017c\22\u017d\1\0"+
    "\41\u017d\1\0\31\u017d\6\0\1\112\1\u017e\2\112\4\0"+
    "\1\112\6\0\6\112\1\0\13\112\1\0\12\112\4\0"+
    "\4\112\1\0\7\112\1\0\2\112\3\0\6\112\6\0"+
    "\4\112\4\0\1\112\6\0\6\112\1\0\11\112\1\u017f"+
    "\1\112\1\0\1\u017f\11\112\4\0\4\112\1\0\7\112"+
    "\1\0\2\112\3\0\6\112\1\144\3\0\2\144\1\u0180"+
    "\1\144\1\u0152\5\144\1\u0152\6\144\6\u014a\1\144\13\u014a"+
    "\1\144\12\u014a\1\u0181\3\144\4\u014a\1\144\4\u014a\1\0"+
    "\1\144\1\u014a\1\144\1\0\4\144\6\u014a\1\144\3\0"+
    "\4\144\1\u0182\5\144\1\u0182\6\144\6\u017c\1\144\13\u017c"+
    "\1\144\12\u017c\4\144\4\u017c\1\144\4\u017c\1\0\1\144"+
    "\1\u017c\1\144\1\0\4\144\6\u017c\1\u0183\3\u017d\16\u0183"+
    "\1\144\2\u0183\6\u017d\1\u0183\13\u017d\1\u0183\12\u017d\2\u0183"+
    "\1\144\1\u0183\4\u017d\1\u0183\5\u017d\1\u0183\1\u017d\1\u0183"+
    "\1\u017d\4\u0183\6\u017d\1\160\2\0\1\355\1\160\1\0"+
    "\2\160\1\u0155\1\160\1\0\1\160\2\0\1\u0155\5\160"+
    "\1\0\6\u0155\1\160\13\u0155\1\160\12\u0155\1\u0184\3\160"+
    "\4\u0155\1\160\4\u0155\2\160\1\u0155\6\160\6\u0155\1\160"+
    "\2\0\1\355\1\160\1\0\2\160\1\u0185\1\160\1\0"+
    "\1\160\2\0\1\u0185\5\160\1\0\6\u0185\1\160\13\u0185"+
    "\1\160\12\u0185\4\160\4\u0185\1\160\4\u0185\2\160\1\u0185"+
    "\6\160\6\u0185\1\u0186\2\u017d\1\u0187\1\u0186\1\u017d\4\u0186"+
    "\1\u017d\1\u0186\2\u017d\4\u0186\1\160\1\u0186\1\u017d\37\u0186"+
    "\1\160\31\u0186\37\0\1\u0188\14\0\1\u0188\72\0\2\u0189"+
    "\112\0\2\u018a\124\0\1\u018b\14\0\1\u018b\72\0\2\u018c"+
    "\66\0\2\u018d\1\0\4\u018d\2\0\1\u0105\4\u018d\1\0"+
    "\11\u018d\1\0\27\u018d\1\0\13\u018d\2\0\1\u018d\4\0"+
    "\1\u018d\1\0\6\u018d\3\0\2\u018e\1\0\4\u018e\2\0"+
    "\1\u0119\4\u018e\1\0\11\u018e\1\0\27\u018e\1\0\13\u018e"+
    "\2\0\1\u018e\4\0\1\u018e\1\0\6\u018e\2\216\1\0"+
    "\31\216\1\u018f\61\216\3\0\2\u0190\1\0\4\u0190\2\0"+
    "\1\u0124\4\u0190\1\0\11\u0190\1\0\27\u0190\1\0\13\u0190"+
    "\2\0\1\u0190\4\0\1\u0190\1\0\6\u0190\2\225\1\0"+
    "\31\225\1\u0191\61\225\10\0\1\u0127\5\0\1\u0127\6\0"+
    "\6\u0127\1\0\13\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127"+
    "\1\0\4\u0127\2\0\4\u0127\3\0\4\u0127\1\u0192\1\u0127"+
    "\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0\5\u0127"+
    "\1\u0193\5\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0"+
    "\4\u0127\2\0\4\u0127\3\0\6\u0127\10\0\1\u0194\5\0"+
    "\1\u0127\6\0\6\u0127\1\0\13\u0127\1\0\12\u0127\1\u0128"+
    "\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0\6\u0127"+
    "\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0\13\u0127"+
    "\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0"+
    "\4\u0127\3\0\1\u0127\1\u0195\4\u0127\10\0\1\u0127\5\0"+
    "\1\u0127\6\0\5\u0127\1\u0196\1\0\13\u0127\1\0\12\u0127"+
    "\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0"+
    "\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0"+
    "\5\u0127\1\u0197\5\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127"+
    "\1\0\4\u0127\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127"+
    "\5\0\1\u0127\6\0\6\u0127\1\0\13\u0127\1\0\4\u0127"+
    "\1\u0198\5\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0"+
    "\4\u0127\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0"+
    "\6\u0127\1\0\13\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127"+
    "\1\0\4\u0127\2\0\4\u0127\3\0\3\u0127\1\u0199\2\u0127"+
    "\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0\13\u0127"+
    "\1\0\5\u0127\1\u019a\4\u0127\1\u0128\3\0\4\u0127\1\0"+
    "\4\u0127\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127\5\0"+
    "\1\u0127\6\0\6\u0127\1\0\13\u0127\1\0\12\u0127\1\u0128"+
    "\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0\3\u0127"+
    "\1\u019b\2\u0127\2\0\1\u019c\150\0\1\u019d\152\0\1\u0176"+
    "\41\0\1\u0178\15\0\3\u0178\2\0\1\u0178\11\0\1\u0178"+
    "\1\0\2\u0178\11\0\1\u0178\1\0\1\u0177\3\u0178\3\0"+
    "\1\u0178\24\0\1\u019e\5\0\1\u019e\6\0\6\u019e\1\0"+
    "\13\u019e\1\0\12\u019e\4\0\4\u019e\1\0\4\u019e\2\0"+
    "\1\u019e\6\0\6\u019e\22\u019f\1\0\41\u019f\1\0\31\u019f"+
    "\6\0\1\u01a0\1\0\1\u017c\5\0\1\u017c\6\0\6\u017c"+
    "\1\0\13\u017c\1\0\12\u017c\1\u01a1\3\0\4\u017c\1\0"+
    "\4\u017c\2\0\1\u017c\6\0\6\u017c\22\u01a2\1\u01a3\41\u01a2"+
    "\1\u01a4\31\u01a2\6\0\4\112\4\0\1\112\6\0\6\112"+
    "\1\0\7\112\1\u01a5\3\112\1\0\12\112\4\0\4\112"+
    "\1\0\7\112\1\0\2\112\3\0\6\112\6\0\4\112"+
    "\4\0\1\112\6\0\6\112\1\0\6\112\1\u01a6\4\112"+
    "\1\0\12\112\4\0\1\112\1\u01a6\2\112\1\0\7\112"+
    "\1\0\2\112\3\0\6\112\1\144\3\0\4\144\1\u01a7"+
    "\5\144\1\u01a7\6\144\6\u019e\1\144\13\u019e\1\144\12\u019e"+
    "\4\144\4\u019e\1\144\4\u019e\1\0\1\144\1\u019e\1\144"+
    "\1\0\4\144\6\u019e\1\u01a8\3\u019f\16\u01a8\1\144\2\u01a8"+
    "\6\u019f\1\u01a8\13\u019f\1\u01a8\12\u019f\2\u01a8\1\144\1\u01a8"+
    "\4\u019f\1\u01a8\5\u019f\1\u01a8\1\u019f\1\u01a8\1\u019f\4\u01a8"+
    "\6\u019f\1\144\3\0\2\144\1\u01a9\1\144\1\u0182\5\144"+
    "\1\u0182\6\144\6\u017c\1\144\13\u017c\1\144\12\u017c\1\u01aa"+
    "\3\144\4\u017c\1\144\4\u017c\1\0\1\144\1\u017c\1\144"+
    "\1\0\4\144\6\u017c\1\u01ab\3\u01a2\16\u01ab\1\u01ac\2\u01ab"+
    "\6\u01a2\1\u01ab\13\u01a2\1\u01ab\12\u01a2\2\u01ab\1\u01ad\1\u01ab"+
    "\4\u01a2\1\u01ab\5\u01a2\1\u01ab\1\u01a2\1\u01ab\1\u01a2\4\u01ab"+
    "\6\u01a2\1\u01ae\2\u019f\1\u01af\1\u01ae\1\u019f\4\u01ae\1\u019f"+
    "\1\u01ae\2\u019f\4\u01ae\1\160\1\u01ae\1\u019f\37\u01ae\1\160"+
    "\31\u01ae\1\160\2\0\1\355\1\160\1\0\2\160\1\u0185"+
    "\1\160\1\0\1\160\2\0\1\u0185\5\160\1\0\6\u0185"+
    "\1\160\13\u0185\1\160\12\u0185\1\u01b0\3\160\4\u0185\1\160"+
    "\4\u0185\2\160\1\u0185\6\160\6\u0185\1\u01b1\2\u01a2\1\u01b2"+
    "\1\u01b1\1\u01a2\4\u01b1\1\u01a2\1\u01b1\2\u01a2\4\u01b1\1\160"+
    "\1\u01b1\1\u01a2\37\u01b1\1\u01b3\31\u01b1\51\0\1\u01b4\5\0"+
    "\1\u01b4\102\0\1\u01b5\13\0\1\u01b5\76\0\1\u01b6\11\0"+
    "\1\u01b6\103\0\1\u01b7\11\0\1\u01b7\106\0\1\u01b8\13\0"+
    "\1\u01b8\35\0\2\216\1\0\32\216\1\u01b9\60\216\2\225"+
    "\1\0\32\225\1\u01ba\60\225\10\0\1\u01bb\5\0\1\u0127"+
    "\6\0\6\u0127\1\0\13\u0127\1\0\12\u0127\1\u0128\3\0"+
    "\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0\6\u0127\10\0"+
    "\1\u0127\5\0\1\u0127\6\0\5\u0127\1\u01bc\1\0\10\u0127"+
    "\1\u01bd\2\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0"+
    "\2\u0127\1\u01be\1\u0127\2\0\4\u0127\3\0\1\u0127\1\u01bf"+
    "\1\u01c0\3\u0127\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127"+
    "\1\0\10\u0127\1\u01c1\2\u0127\1\0\12\u0127\1\u0128\3\0"+
    "\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0\6\u0127\10\0"+
    "\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0\13\u0127\1\0"+
    "\12\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127"+
    "\3\0\1\u0127\1\u01c2\4\u0127\10\0\1\u01c3\5\0\1\u0127"+
    "\6\0\6\u0127\1\0\13\u0127\1\0\12\u0127\1\u0128\3\0"+
    "\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0\6\u0127\10\0"+
    "\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0\6\u0127\1\u01c4"+
    "\4\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127"+
    "\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127"+
    "\6\0\6\u0127\1\0\5\u0127\1\u01c5\5\u0127\1\0\12\u0127"+
    "\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0"+
    "\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0"+
    "\13\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0\2\u0127"+
    "\1\u01c6\1\u0127\2\0\4\u0127\3\0\6\u0127\36\0\1\u01c7"+
    "\65\0\1\u01c8\1\0\1\u019e\5\0\1\u019e\6\0\6\u019e"+
    "\1\0\13\u019e\1\0\12\u019e\4\0\4\u019e\1\0\4\u019e"+
    "\2\0\1\u019e\5\0\1\u017b\6\u019e\22\u019f\1\u01c9\41\u019f"+
    "\1\u01ca\31\u019f\10\0\1\u01cb\5\0\1\u01cb\6\0\6\u01cb"+
    "\1\0\13\u01cb\1\0\12\u01cb\4\0\4\u01cb\1\0\4\u01cb"+
    "\2\0\1\u01cb\6\0\6\u01cb\22\u01cc\1\0\41\u01cc\1\0"+
    "\31\u01cc\22\u01a2\1\u01cd\41\u01a2\1\u01a4\31\u01a2\6\0\1\u01ce"+
    "\107\0\22\u01cf\1\0\41\u01cf\1\u01a4\31\u01cf\6\0\4\112"+
    "\4\0\1\112\6\0\6\112\1\0\13\112\1\0\4\112"+
    "\1\u01d0\5\112\4\0\4\112\1\0\7\112\1\0\2\112"+
    "\3\0\6\112\6\0\4\112\4\0\1\112\6\0\6\112"+
    "\1\0\3\112\1\u01d1\7\112\1\0\4\112\1\u01d1\5\112"+
    "\4\0\4\112\1\0\7\112\1\0\2\112\3\0\6\112"+
    "\1\144\3\0\2\144\1\u01d2\1\144\1\u01a7\5\144\1\u01a7"+
    "\6\144\6\u019e\1\144\13\u019e\1\144\12\u019e\4\144\4\u019e"+
    "\1\144\4\u019e\1\0\1\144\1\u019e\1\144\1\0\4\144"+
    "\6\u019e\1\u01a8\3\u019f\16\u01a8\1\u01d3\2\u01a8\6\u019f\1\u01a8"+
    "\13\u019f\1\u01a8\12\u019f\2\u01a8\1\u01d4\1\u01a8\4\u019f\1\u01a8"+
    "\5\u019f\1\u01a8\1\u019f\1\u01a8\1\u019f\4\u01a8\6\u019f\1\144"+
    "\3\0\4\144\1\u01a9\5\144\1\u01a9\6\144\6\u01cb\1\144"+
    "\13\u01cb\1\144\12\u01cb\4\144\4\u01cb\1\144\4\u01cb\1\0"+
    "\1\144\1\u01cb\1\144\1\0\4\144\6\u01cb\1\u01d5\3\u01cc"+
    "\16\u01d5\1\144\2\u01d5\6\u01cc\1\u01d5\13\u01cc\1\u01d5\12\u01cc"+
    "\2\u01d5\1\144\1\u01d5\4\u01cc\1\u01d5\5\u01cc\1\u01d5\1\u01cc"+
    "\1\u01d5\1\u01cc\4\u01d5\6\u01cc\1\u01ab\3\u01a2\16\u01ab\1\u01d6"+
    "\2\u01ab\6\u01a2\1\u01ab\13\u01a2\1\u01ab\12\u01a2\2\u01ab\1\u01ad"+
    "\1\u01ab\4\u01a2\1\u01ab\5\u01a2\1\u01ab\1\u01a2\1\u01ab\1\u01a2"+
    "\4\u01ab\6\u01a2\1\144\3\0\2\144\1\u01d7\16\144\6\0"+
    "\1\144\13\0\1\144\12\0\4\144\4\0\1\144\5\0"+
    "\1\144\1\0\1\144\1\0\4\144\6\0\1\u01d8\3\u01cf"+
    "\16\u01d8\1\144\2\u01d8\6\u01cf\1\u01d8\13\u01cf\1\u01d8\12\u01cf"+
    "\2\u01d8\1\u01ad\1\u01d8\4\u01cf\1\u01d8\5\u01cf\1\u01d8\1\u01cf"+
    "\1\u01d8\1\u01cf\4\u01d8\6\u01cf\1\u01ae\2\u019f\1\u01af\1\u01ae"+
    "\1\u019f\4\u01ae\1\u019f\1\u01ae\2\u019f\4\u01ae\1\160\1\u01ae"+
    "\1\u019f\37\u01ae\1\u01d9\31\u01ae\1\u01da\2\u01cc\1\u01db\1\u01da"+
    "\1\u01cc\4\u01da\1\u01cc\1\u01da\2\u01cc\4\u01da\1\160\1\u01da"+
    "\1\u01cc\37\u01da\1\160\31\u01da\1\u01b1\2\u01a2\1\u01b2\1\u01b1"+
    "\1\u01a2\4\u01b1\1\u01a2\1\u01b1\2\u01a2\4\u01b1\1\u01dc\1\u01b1"+
    "\1\u01a2\37\u01b1\1\u01b3\31\u01b1\1\u01dd\2\u01cf\1\u01de\1\u01dd"+
    "\1\u01cf\4\u01dd\1\u01cf\1\u01dd\2\u01cf\4\u01dd\1\160\1\u01dd"+
    "\1\u01cf\37\u01dd\1\u01b3\31\u01dd\52\0\1\u01df\41\0\1\u01df"+
    "\44\0\1\u01e0\22\0\1\u01e0\75\0\1\u01e1\12\0\1\u01e1"+
    "\63\0\2\u01e2\121\0\1\u01e3\40\0\1\u01e3\20\0\2\216"+
    "\1\0\33\216\1\u01e4\57\216\2\225\1\0\33\225\1\u01e5"+
    "\57\225\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0"+
    "\10\u0127\1\u01e6\2\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127"+
    "\1\0\4\u0127\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127"+
    "\5\0\1\u0127\6\0\6\u0127\1\0\11\u0127\1\u01e7\1\u0127"+
    "\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0"+
    "\4\u0127\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0"+
    "\6\u0127\1\0\13\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127"+
    "\1\0\4\u0127\2\0\1\u01e8\3\u0127\3\0\6\u0127\10\0"+
    "\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0\11\u0127\1\u01e9"+
    "\1\u0127\1\0\5\u0127\1\u01ea\4\u0127\1\u0128\3\0\4\u0127"+
    "\1\0\4\u0127\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127"+
    "\5\0\1\u0127\6\0\6\u0127\1\0\12\u0127\1\u01eb\1\0"+
    "\12\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127"+
    "\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127"+
    "\1\0\10\u0127\1\u01ec\2\u0127\1\0\12\u0127\1\u0128\3\0"+
    "\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0\6\u0127\10\0"+
    "\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0\6\u0127\1\u01ed"+
    "\4\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127"+
    "\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127"+
    "\6\0\6\u0127\1\0\13\u0127\1\0\6\u0127\1\u01ee\3\u0127"+
    "\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0"+
    "\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0"+
    "\13\u0127\1\0\4\u0127\1\u01ef\5\u0127\1\u0128\3\0\4\u0127"+
    "\1\0\4\u0127\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127"+
    "\5\0\1\u0127\6\0\6\u0127\1\0\11\u0127\1\u01f0\1\u0127"+
    "\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0"+
    "\4\u0127\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0"+
    "\6\u0127\1\0\13\u0127\1\0\6\u0127\1\u01f1\3\u0127\1\u0128"+
    "\3\0\4\u0127\1\0\1\u01f2\3\u0127\2\0\4\u0127\3\0"+
    "\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0"+
    "\13\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127"+
    "\2\0\4\u0127\3\0\3\u0127\1\u01f3\2\u0127\37\0\1\u01f4"+
    "\66\0\1\u01f5\5\0\1\u01f5\6\0\6\u01f5\1\0\13\u01f5"+
    "\1\0\12\u01f5\4\0\4\u01f5\1\0\4\u01f5\2\0\1\u01f5"+
    "\6\0\6\u01f5\6\0\1\u0179\100\0\1\u017b\6\0\22\u01f6"+
    "\1\0\41\u01f6\1\u01ca\31\u01f6\22\u01cc\1\u017b\41\u01cc\1\u01f7"+
    "\31\u01cc\6\u017b\1\u01f8\7\u017b\1\0\6\u017b\6\0\1\u017b"+
    "\13\0\1\u017b\12\0\4\u017b\4\0\1\u017b\4\0\2\u017b"+
    "\1\0\6\u017b\16\0\1\u01f9\5\0\1\u01f9\6\0\6\u01f9"+
    "\1\0\13\u01f9\1\0\12\u01f9\4\0\4\u01f9\1\0\4\u01f9"+
    "\2\0\1\u01f9\6\0\6\u01f9\22\u01cf\1\u01fa\41\u01cf\1\0"+
    "\31\u01cf\6\0\4\112\4\0\1\112\6\0\6\112\1\0"+
    "\13\112\1\0\7\112\1\u01fb\2\112\4\0\4\112\1\0"+
    "\7\112\1\0\2\112\3\0\6\112\5\0\1\u01fc\4\112"+
    "\3\0\1\u01fc\1\112\5\0\1\u01fc\6\112\1\0\13\112"+
    "\1\0\12\112\4\0\4\112\1\0\7\112\1\0\2\112"+
    "\3\0\6\112\1\144\3\0\4\144\1\u01d2\5\144\1\u01d2"+
    "\6\144\6\u01f5\1\144\13\u01f5\1\144\12\u01f5\4\144\4\u01f5"+
    "\1\144\4\u01f5\1\0\1\144\1\u01f5\1\144\1\0\4\144"+
    "\6\u01f5\1\144\3\0\2\144\1\u0180\16\144\6\0\1\144"+
    "\13\0\1\144\12\0\4\144\4\0\1\144\5\0\1\144"+
    "\1\0\1\144\1\0\4\144\6\0\1\u01fd\3\u01f6\16\u01fd"+
    "\1\144\2\u01fd\6\u01f6\1\u01fd\13\u01f6\1\u01fd\12\u01f6\2\u01fd"+
    "\1\u01d4\1\u01fd\4\u01f6\1\u01fd\5\u01f6\1\u01fd\1\u01f6\1\u01fd"+
    "\1\u01f6\4\u01fd\6\u01f6\1\u01d5\3\u01cc\16\u01d5\1\144\2\u01d5"+
    "\6\u01cc\1\u01d5\13\u01cc\1\u01d5\12\u01cc\2\u01d5\1\u01fe\1\u01d5"+
    "\4\u01cc\1\u01d5\5\u01cc\1\u01d5\1\u01cc\1\u01d5\1\u01cc\4\u01d5"+
    "\6\u01cc\1\144\3\u017b\2\144\1\u01d7\16\144\6\0\1\144"+
    "\13\0\1\144\12\0\4\144\4\0\1\144\4\0\1\u017b"+
    "\1\144\1\0\1\144\1\u017b\4\144\6\0\1\144\3\0"+
    "\4\144\1\u01ff\5\144\1\u01ff\6\144\6\u01f9\1\144\13\u01f9"+
    "\1\144\12\u01f9\4\144\4\u01f9\1\144\4\u01f9\1\0\1\144"+
    "\1\u01f9\1\144\1\0\4\144\6\u01f9\1\u01d8\3\u01cf\16\u01d8"+
    "\1\u01d6\2\u01d8\6\u01cf\1\u01d8\13\u01cf\1\u01d8\12\u01cf\2\u01d8"+
    "\1\144\1\u01d8\4\u01cf\1\u01d8\5\u01cf\1\u01d8\1\u01cf\1\u01d8"+
    "\1\u01cf\4\u01d8\6\u01cf\1\u0200\2\u01f6\1\u0201\1\u0200\1\u01f6"+
    "\4\u0200\1\u01f6\1\u0200\2\u01f6\4\u0200\1\160\1\u0200\1\u01f6"+
    "\37\u0200\1\u01d9\31\u0200\1\u01da\2\u01cc\1\u01db\1\u01da\1\u01cc"+
    "\4\u01da\1\u01cc\1\u01da\2\u01cc\4\u01da\1\160\1\u01da\1\u01cc"+
    "\37\u01da\1\u0202\31\u01da\1\160\2\u017b\1\u0203\1\160\1\u017b"+
    "\4\160\1\u017b\1\160\2\u017b\6\160\1\u017b\71\160\1\u01dd"+
    "\2\u01cf\1\u01de\1\u01dd\1\u01cf\4\u01dd\1\u01cf\1\u01dd\2\u01cf"+
    "\4\u01dd\1\u01dc\1\u01dd\1\u01cf\37\u01dd\1\160\31\u01dd\41\0"+
    "\1\u0204\11\0\1\u0204\101\0\1\u0205\14\0\1\u0205\100\0"+
    "\1\u0206\14\0\1\u0206\41\0\2\216\1\0\34\216\1\u0207"+
    "\56\216\2\225\1\0\34\225\1\u0208\56\225\10\0\1\u0127"+
    "\5\0\1\u0127\6\0\6\u0127\1\0\13\u0127\1\0\12\u0127"+
    "\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0\1\u012f\3\u0127"+
    "\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127"+
    "\1\0\11\u0127\1\u0209\1\u0127\1\0\12\u0127\1\u0128\3\0"+
    "\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0\6\u0127\10\0"+
    "\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0\12\u0127\1\u020a"+
    "\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0"+
    "\4\u0127\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0"+
    "\6\u0127\1\0\13\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127"+
    "\1\0\2\u0127\1\u020b\1\u0127\2\0\4\u0127\3\0\6\u0127"+
    "\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0\13\u0127"+
    "\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0\2\u0127\1\u020c"+
    "\1\u0127\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127\5\0"+
    "\1\u0127\6\0\6\u0127\1\0\13\u0127\1\0\4\u0127\1\u020d"+
    "\5\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127"+
    "\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127"+
    "\1\0\5\u0127\1\u020e\5\u0127\1\0\12\u0127\1\u0128\3\0"+
    "\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0\6\u0127\10\0"+
    "\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0\5\u0127\1\u020f"+
    "\5\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127"+
    "\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127"+
    "\6\0\6\u0127\1\0\13\u0127\1\0\5\u0127\1\u0210\4\u0127"+
    "\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0"+
    "\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0\5\u0127\1\u0211"+
    "\1\0\13\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0"+
    "\4\u0127\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127\5\0"+
    "\1\u0127\6\0\5\u0127\1\u0212\1\0\13\u0127\1\0\12\u0127"+
    "\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0"+
    "\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0"+
    "\5\u0127\1\u0213\5\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127"+
    "\1\0\4\u0127\2\0\4\u0127\3\0\6\u0127\36\0\1\u0214"+
    "\67\0\1\u01f5\5\0\1\u01f5\6\0\6\u01f5\1\0\13\u01f5"+
    "\1\0\12\u01f5\4\0\4\u01f5\1\0\4\u01f5\2\0\1\u01f5"+
    "\5\0\1\u017b\6\u01f5\22\u01f6\1\u01c9\41\u01f6\1\0\31\u01f6"+
    "\22\u0215\1\0\41\u0215\1\u01f7\31\u0215\6\0\1\u01a0\1\0"+
    "\1\u01f9\5\0\1\u01f9\6\0\6\u01f9\1\0\13\u01f9\1\0"+
    "\12\u01f9\4\0\4\u01f9\1\0\4\u01f9\2\0\1\u01f9\6\0"+
    "\6\u01f9\6\0\4\112\4\0\1\112\6\0\5\112\1\u0216"+
    "\1\0\13\112\1\0\12\112\4\0\4\112\1\0\7\112"+
    "\1\0\2\112\3\0\6\112\5\0\1\u01fc\7\0\1\u01fc"+
    "\6\0\1\u01fc\71\0\1\u01fd\3\u01f6\16\u01fd\1\u01d3\2\u01fd"+
    "\6\u01f6\1\u01fd\13\u01f6\1\u01fd\12\u01f6\2\u01fd\1\144\1\u01fd"+
    "\4\u01f6\1\u01fd\5\u01f6\1\u01fd\1\u01f6\1\u01fd\1\u01f6\4\u01fd"+
    "\6\u01f6\1\u0217\3\u0215\16\u0217\1\144\2\u0217\6\u0215\1\u0217"+
    "\13\u0215\1\u0217\12\u0215\2\u0217\1\u01fe\1\u0217\4\u0215\1\u0217"+
    "\5\u0215\1\u0217\1\u0215\1\u0217\1\u0215\4\u0217\6\u0215\1\144"+
    "\3\0\2\144\1\u01a9\1\144\1\u01ff\5\144\1\u01ff\6\144"+
    "\6\u01f9\1\144\13\u01f9\1\144\12\u01f9\4\144\4\u01f9\1\144"+
    "\4\u01f9\1\0\1\144\1\u01f9\1\144\1\0\4\144\6\u01f9"+
    "\1\u0200\2\u01f6\1\u0201\1\u0200\1\u01f6\4\u0200\1\u01f6\1\u0200"+
    "\2\u01f6\4\u0200\1\160\1\u0200\1\u01f6\37\u0200\1\160\31\u0200"+
    "\1\u0218\2\u0215\1\u0219\1\u0218\1\u0215\4\u0218\1\u0215\1\u0218"+
    "\2\u0215\4\u0218\1\160\1\u0218\1\u0215\37\u0218\1\u0202\31\u0218"+
    "\2\216\1\0\33\216\1\u021a\57\216\2\225\1\0\33\225"+
    "\1\u021b\57\225\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127"+
    "\1\0\13\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0"+
    "\4\u0127\2\0\4\u0127\3\0\4\u0127\1\u021c\1\u0127\10\0"+
    "\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0\13\u0127\1\0"+
    "\4\u0127\1\u021d\5\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127"+
    "\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127"+
    "\6\0\6\u0127\1\0\13\u0127\1\0\12\u0127\1\u0128\3\0"+
    "\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0\3\u0127\1\u021e"+
    "\2\u0127\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0"+
    "\13\u0127\1\0\5\u0127\1\u021f\4\u0127\1\u0128\3\0\4\u0127"+
    "\1\0\4\u0127\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127"+
    "\5\0\1\u0127\6\0\6\u0127\1\0\13\u0127\1\0\12\u0127"+
    "\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0"+
    "\3\u0127\1\u0220\2\u0127\10\0\1\u0127\5\0\1\u0127\6\0"+
    "\6\u0127\1\0\13\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127"+
    "\1\0\3\u0127\1\u0221\2\0\4\u0127\3\0\6\u0127\10\0"+
    "\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0\11\u0127\1\u0222"+
    "\1\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127"+
    "\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127"+
    "\6\0\6\u0127\1\0\13\u0127\1\0\6\u0127\1\u0223\3\u0127"+
    "\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0"+
    "\6\u0127\33\0\1\u0224\62\0\22\u0215\1\u017b\41\u0215\1\0"+
    "\31\u0215\6\0\4\112\4\0\1\112\6\0\6\112\1\0"+
    "\5\112\1\u0225\5\112\1\0\12\112\4\0\4\112\1\0"+
    "\7\112\1\0\2\112\3\0\6\112\1\u0217\3\u0215\16\u0217"+
    "\1\144\2\u0217\6\u0215\1\u0217\13\u0215\1\u0217\12\u0215\2\u0217"+
    "\1\144\1\u0217\4\u0215\1\u0217\5\u0215\1\u0217\1\u0215\1\u0217"+
    "\1\u0215\4\u0217\6\u0215\1\u0218\2\u0215\1\u0219\1\u0218\1\u0215"+
    "\4\u0218\1\u0215\1\u0218\2\u0215\4\u0218\1\160\1\u0218\1\u0215"+
    "\37\u0218\1\160\31\u0218\2\216\1\0\30\216\1\u0226\62\216"+
    "\2\225\1\0\30\225\1\u0227\62\225\10\0\1\u0127\5\0"+
    "\1\u0127\6\0\6\u0127\1\0\6\u0127\1\u0228\4\u0127\1\0"+
    "\12\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127"+
    "\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127"+
    "\1\0\5\u0127\1\u0229\5\u0127\1\0\12\u0127\1\u0128\3\0"+
    "\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0\6\u0127\10\0"+
    "\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0\13\u0127\1\0"+
    "\12\u0127\1\u0128\3\0\4\u0127\1\0\2\u0127\1\u022a\1\u0127"+
    "\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127"+
    "\6\0\6\u0127\1\0\13\u0127\1\0\12\u0127\1\u0128\3\0"+
    "\4\u0127\1\0\2\u0127\1\u022b\1\u0127\2\0\4\u0127\3\0"+
    "\6\u0127\6\0\4\112\4\0\1\112\6\0\6\112\1\0"+
    "\7\112\1\u022c\3\112\1\0\12\112\4\0\4\112\1\0"+
    "\7\112\1\0\2\112\3\0\6\112\10\0\1\u0127\5\0"+
    "\1\u0127\6\0\6\u0127\1\0\11\u0127\1\u022d\1\u0127\1\0"+
    "\12\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127"+
    "\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127"+
    "\1\0\13\u0127\1\0\6\u0127\1\u022e\3\u0127\1\u0128\3\0"+
    "\4\u0127\1\0\1\u022f\3\u0127\2\0\4\u0127\3\0\6\u0127"+
    "\10\0\1\u0127\5\0\1\u0127\6\0\6\u0127\1\0\13\u0127"+
    "\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0"+
    "\4\u0127\3\0\3\u0127\1\u0230\2\u0127\10\0\1\u0127\5\0"+
    "\1\u0127\6\0\6\u0127\1\0\13\u0127\1\0\12\u0127\1\u0128"+
    "\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0\5\u0127"+
    "\1\u01f1\6\0\4\112\4\0\1\112\6\0\6\112\1\0"+
    "\13\112\1\0\12\112\4\0\4\112\1\0\7\112\1\0"+
    "\2\112\3\0\3\112\1\u0231\2\112\10\0\1\u0127\5\0"+
    "\1\u0127\6\0\5\u0127\1\u0232\1\0\13\u0127\1\0\12\u0127"+
    "\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0"+
    "\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0\5\u0127\1\u0233"+
    "\1\0\13\u0127\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0"+
    "\4\u0127\2\0\4\u0127\3\0\6\u0127\10\0\1\u0127\5\0"+
    "\1\u0127\6\0\6\u0127\1\0\5\u0127\1\u0234\5\u0127\1\0"+
    "\12\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127"+
    "\3\0\6\u0127\6\0\4\112\4\0\1\112\6\0\6\112"+
    "\1\0\5\112\1\u0235\5\112\1\0\12\112\4\0\4\112"+
    "\1\0\7\112\1\0\2\112\3\0\6\112\10\0\1\u0127"+
    "\5\0\1\u0127\6\0\6\u0127\1\0\11\u0127\1\u0236\1\u0127"+
    "\1\0\12\u0127\1\u0128\3\0\4\u0127\1\0\4\u0127\2\0"+
    "\4\u0127\3\0\6\u0127\10\0\1\u0127\5\0\1\u0127\6\0"+
    "\6\u0127\1\0\13\u0127\1\0\6\u0127\1\u0237\3\u0127\1\u0128"+
    "\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0\6\u0127"+
    "\6\0\4\112\4\0\1\112\6\0\6\112\1\0\5\112"+
    "\1\u0238\5\112\1\0\12\112\4\0\4\112\1\0\7\112"+
    "\1\0\2\112\3\0\6\112\10\0\1\u0127\5\0\1\u0127"+
    "\6\0\6\u0127\1\0\13\u0127\1\0\12\u0127\1\u0128\3\0"+
    "\4\u0127\1\0\2\u0127\1\u0239\1\u0127\2\0\4\u0127\3\0"+
    "\6\u0127\6\0\4\112\4\0\1\112\6\0\6\112\1\0"+
    "\13\112\1\0\4\112\1\u023a\5\112\4\0\4\112\1\0"+
    "\7\112\1\0\2\112\3\0\6\112\10\0\1\u0127\5\0"+
    "\1\u0127\6\0\6\u0127\1\0\13\u0127\1\0\12\u0127\1\u0128"+
    "\3\0\4\u0127\1\0\4\u0127\2\0\4\u0127\3\0\5\u0127"+
    "\1\u022e";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack(yy_packed);


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  // final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",        //$NON-NLS-1$
    "Internal error: unknown state",        //$NON-NLS-1$
    "Error: could not match input",        //$NON-NLS-1$
    "Error: pushback value was too large"    //$NON-NLS-1$
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  0,  0,  0,  0,  1,  0,  0,  1,  1,  1,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  9,  1,  1,  9,  1,  1, 
     1,  1,  1,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1, 
     1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  9,  1, 
     1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     1,  1,  1,  1,  1,  1,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  9,  1,  1,  9,  1,  1,  9,  1,  1,  9,  1,  1, 
     9,  1,  1,  9,  1,  1,  9,  1,  1,  9,  1,  1,  9,  1,  1,  9, 
     1,  1,  9,  1,  1,  9,  9,  1,  1,  0,  1,  0,  9,  1,  1,  0, 
     1,  0,  0,  0,  9,  1,  1,  1,  9,  9,  0,  0,  0,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  9,  0,  0,  9,  1,  1,  0,  0,  0,  9, 
     0,  0,  1,  1,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  9, 
     1,  0,  0,  1,  1,  0,  0,  1,  0,  0,  0,  9,  0,  0,  0,  1, 
     0,  0,  0,  9,  1,  0,  0,  1,  1,  0,  1,  0,  0,  0,  9,  1, 
     0,  0,  1,  1,  0,  1,  0,  9,  9,  0,  0,  0,  0,  0,  1,  0, 
     0,  0,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  0, 
     0,  0,  1,  1,  1,  9,  0,  0,  9,  0,  0,  0,  9,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  1,  0,  0, 
     1,  0,  1,  0,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  9,  9,  0,  1,  9,  0,  0,  0,  9,  1,  0,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0, 
     1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  1,  9,  0,  0,  0,  0, 
     0,  0,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1, 
     1,  0,  1,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  1,  0,  0,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  0,  0, 
     0,  9,  9,  1,  1,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0,  0,  0,  0,  0,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1, 
     0,  1,  1,  9,  9,  9,  1,  1,  0,  0,  0,  0,  0,  1,  1,  0, 
     1,  0,  0,  0,  0,  1,  1,  1,  0,  1,  1,  1,  0,  0,  0,  1, 
     1,  0,  1,  9,  1,  1,  1,  0,  0,  0,  0,  1,  0,  1,  0,  0, 
     1,  1,  0,  0,  1,  0,  1,  1,  0,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[16384];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  // private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  // private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  // private boolean yy_atBOL;

  /** yy_atEOF == true <=> the scanner has returned a value for EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
    public static boolean debugTokenizer = false;
    
    private int fTokenCount = 0;
 
    // required holders for white-space compacting
    private boolean fShouldLoadBuffered = false;
    private String fBufferedContext = null;
    private int fBufferedStart = 1;
    private int fBufferedLength = 0;
    private String f_context = null;

    // state stack for handling embedded regions
    private IntStack fStateStack = new IntStack();

    private String context = null;
    private int start = 0;
    private int textLength = 0;
    private int length = 0;

    // offset for tracking position specific block tags
    private int fOffset = 0;
    
    // the name of the current tag being opened
    private String fCurrentTagName = null;

    // the list of tag name BlockMarkers
    private List fBlockMarkers = new ArrayList();

    // required to not seek text blocks on an end tag
    private boolean fIsBlockingEnabled = false;
    private boolean fIsCaseSensitiveBlocking = true;

    private XMLParserRegionFactory fRegionFactory = new XMLParserRegionFactory();
/**
 * user method 
 */
public final void addBlockMarker(BlockMarker marker) {
    if(containsTagName(marker.getTagName()))
        return;
    fBlockMarkers.add(marker);
}
/**
 * user method 
 */
public final void removeBlockMarker(BlockMarker marker) {
    fBlockMarkers.remove(marker);
}
/**
 * user method 
 */
public final void removeBlockMarker(String tagname) {
    if (fBlockMarkers != null) {
        Iterator blocks = fBlockMarkers.iterator();
        while (blocks.hasNext()) {
            if (((BlockMarker) blocks.next()).getTagName().equals(tagname))
                blocks.remove();
        }
    }
}
/* user method */
public final boolean isCaseSensitiveBlocking() {
    return fIsCaseSensitiveBlocking;
}
/* user method */
public final void setCaseSensitiveBlocking(boolean newValue) {
    fIsCaseSensitiveBlocking = newValue;
}
/* user method */
public boolean getBlockMarkerCaseSensitivity() {
        return getBlockMarkerCaseSensitivity(fCurrentTagName);
}
/* user method */
public boolean getBlockMarkerCaseSensitivity(String name) {
    Iterator iterator = fBlockMarkers.iterator();
    while(iterator.hasNext()) {
        BlockMarker marker = (BlockMarker)iterator.next();
        boolean casesensitive = marker.isCaseSensitive();
        if(casesensitive && marker.getTagName().equals(name))
            return casesensitive;
        else if(!casesensitive && marker.getTagName().equalsIgnoreCase(name))
            return casesensitive;
    }
    return true;
}
/* user method */
public String getBlockMarkerContext() {
    return getBlockMarkerContext(fCurrentTagName);
}
/* user method */
public String getBlockMarkerContext(String name) {
    Iterator iterator = fBlockMarkers.iterator();
    while(iterator.hasNext()) {
        BlockMarker marker = (BlockMarker)iterator.next();
        if(marker.getTagName().equals(name))
            return marker.getContext();
    }
    return BLOCK_TEXT;
}
/* user method */
public List getBlockMarkers() {
    return fBlockMarkers;
}
/* user method */
public final int getOffset() {
    return fOffset + yychar;
}
private final boolean isBlockMarker() {
    return isBlockMarker(fCurrentTagName);
}
private final boolean isBlockMarker(String tagName) {
    if (!fIsBlockingEnabled)
        return false;
    return containsTagName(tagName);
}
/**
 * user method
 */
public final void beginBlockTagScan(String newTagName) {
    beginBlockMarkerScan(newTagName, BLOCK_TEXT);
}
/**
 * user method
 *
 * Special tokenizer setup.  Allows tokenization to be initiated at the
 * start of a text block within a "newTagName" tag.
 *
 * Example: 
 *    Tokenizer toker = new Tokenizer();
 *    toker.setCaseSensitiveBlocking(false);
 *    toker.reset(new java.io.StringReader("afiuhqwkejhtasihgalkwhtq</scripter></scr></script>asgdasga"));
 *    toker.beginBlockMarkerScan("script", BLOCK_TEXT);
 *    toker.getRegions(); 
 *
 * Returns:
 *    BLOCK_TEXT: 0-40
 *    XML_END_TAG_OPEN: 41-42
 *    XML_TAG_NAME: 43-48
 *    XML_TAG_CLOSE: 49-49
 *    XML_CONTENT: 50-57
 *
 */
public final void beginBlockMarkerScan(String newTagName, String blockcontext) {
    yybegin(ST_BLOCK_TAG_SCAN);
    fCurrentTagName = newTagName;
}
/**
 * Method doScan.
 * 
 * Returns a context region for all of the text from the current position upto the end of input or
 * to right *before* the first occurence of searchString
 * 
 * @param searchString - target string to search for ex.: "-->", "</tagname"
 * @param requireTailSeparator - whether the target must be immediately followed by whitespace or '>'
 * @param context - the context of the scanned region if non-zero length
 * @param exitState - the state to go to if the region was of non-zero length
 * @param abortState - the state to go to if the searchString was found immediately
 * @return String - the context found: the desired context on a non-zero length match, the abortContext on immediate success
 * @throws IOException
 */
private final String doScan(String searchString, boolean requireTailSeparator, String searchContext, int exitState, int immediateFallbackState) throws IOException {
    boolean stillSearching = true;
    // Disable further block (probably)
    fIsBlockingEnabled = false;
    int searchStringLength = searchString.length();
    int n = 0;
    char lastCheckChar;
    int i;
    boolean same = false;
    while (stillSearching) {
        n = 0;
        // Ensure that enough data from the input exists to compare against the search String.
        n = yy_advance();
        while(n != YYEOF && yy_currentPos < searchStringLength)
            n = yy_advance();
        // If the input was too short or we've exhausted the input, stop immediately.
        if (n == YYEOF) {
            stillSearching = false;
        }
        else {
            same = true;
            // Ensure that we've not encountered a complete block (<%%>) that was *shorter* than the closeTagString and
            // thus found twice at current-targetLength [since the first scan would have come out this far anyway].
            // Check the characters in the target versus the last targetLength characters read from the buffer
            // and see if it matches
            
            // safety check for array accesses (yy_currentPos is the *last* character we can check against)
            if(yy_currentPos >= searchStringLength && yy_currentPos <= yy_buffer.length) {
                for(i = 0; i < searchStringLength; i++) {
                    if(same && fIsCaseSensitiveBlocking)
                        same = yy_buffer[i + yy_currentPos - searchStringLength] == searchString.charAt(i);
                    else if(same && !fIsCaseSensitiveBlocking)
                        same = Character.toLowerCase(yy_buffer[i + yy_currentPos - searchStringLength]) == Character.toLowerCase(searchString.charAt(i));
                }
            }
            // safety check failed; no match is possible right now
            else {
                same = false;
            }
            if (same && requireTailSeparator && yy_currentPos < yy_buffer.length) {
                // Additional check for close tags to ensure that targetString="</script" doesn't match
                // "</scriptS"
                lastCheckChar = yy_buffer[yy_currentPos];
                // Succeed on "</script>" and "</script "
                if(lastCheckChar == '>' || Character.isWhitespace(lastCheckChar))
                    stillSearching = false;
            }
            else {
                stillSearching = !same || (yy_currentPos < yy_startRead + searchStringLength);
            }
        }
    }
    if (n != YYEOF || same) {
        // We've stopped short of the end or definitely found a match
        yy_markedPos = yy_currentPos - searchStringLength;
        yy_currentPos = yy_markedPos + 1;
        // If the searchString occurs at the very beginning of what would have
        // been a Block, resume scanning normally immediately
        if (yy_markedPos == yy_startRead) {
            yybegin(immediateFallbackState);
            return primGetNextToken();
        }
    }
    else {
        // We ran through the rest of the input
        yy_markedPos = yy_currentPos;
        yy_currentPos++;
    }
    yybegin(exitState);
    // If the ending occurs at the very beginning of what would have
    // been a Block, resume scanning normally immediately
    if(yy_markedPos == yy_startRead)
        return primGetNextToken();
    return searchContext;
}
/**
 * user method
 *
 * A generic lookahead-like operation
 */
private final String doBlockScan(String target, String targetContext, int immediateFallbackState) throws IOException {
    return doScan(target, false, targetContext, immediateFallbackState, immediateFallbackState);
}
/**
 * user method 
 * does a lookahead for the current tag name
 */
private final String doBlockTagScan() throws IOException {
        fIsCaseSensitiveBlocking = getBlockMarkerCaseSensitivity();
    return doScan("</" + fCurrentTagName, true, getBlockMarkerContext(fCurrentTagName), YYINITIAL, YYINITIAL);
}
/**
 * user method
 *
 * Converts the raw context String returned by the primGetNextToken()
 * method into a full ITextRegion by pulling in values for the
 * current offset within the scanning text.
 *
 * Returns null when EOF is encountered and attaches intermittently
 * discovered whitespace onto the end of useful regions.
 *
 * Note that this algorithm caches the token following the one being returned
 * so that whitespace can be collapsed.
 */
public final ITextRegion getNextToken() throws IOException {
    // load the starting non-whitespace token (assume that it is so)
    if (fShouldLoadBuffered) {
        context = fBufferedContext;
        start = fBufferedStart;
        textLength = length = fBufferedLength;
        fShouldLoadBuffered = false;
    }
    else {
        context = primGetNextToken();
        if (context == XML_TAG_NAME) {
            if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
                fCurrentTagName = yytext();
            else
                fCurrentTagName = null;
        }
        else if (context == XML_TAG_OPEN) {
            fIsBlockingEnabled = true;
        }
        else if (context == XML_END_TAG_OPEN) {
            fIsBlockingEnabled = false;
        }
        start = yychar;
        textLength = length = yylength();
        if (yy_atEOF) {
            fTokenCount++;
            return null;
        }
    }
    // store the next token
    f_context = primGetNextToken();
    if (f_context == XML_TAG_NAME) {
        if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
            fCurrentTagName = yytext();
        else
            fCurrentTagName = null;
    }
    else if (f_context == XML_TAG_OPEN) {
        fIsBlockingEnabled = true;
    }
    else if (f_context == XML_END_TAG_OPEN) {
        fIsBlockingEnabled = false;
    }
    fBufferedContext = f_context;
    fBufferedStart = yychar;
    fBufferedLength = yylength();
    fShouldLoadBuffered = true;
    if (fBufferedContext == WHITE_SPACE) {
        fShouldLoadBuffered = false;
        length += fBufferedLength;
    }
    if (context == null) {
        // EOF
        if (SSTokenizer.debugTokenizer) {
            System.out.println(getClass().getName() + " discovered " + fTokenCount + " tokens."); //$NON-NLS-2$//$NON-NLS-1$
        }
        return null;
    }
    fTokenCount++;
    return fRegionFactory.createToken(context, start, textLength, length, null, fCurrentTagName);
}
/* user method */
public SSTokenizer(){
    super();
}
/* user method */
public SSTokenizer(char[] charArray){
        this(new CharArrayReader(charArray));
}
/* user method */
public void reset(char[] charArray) {
    reset(new CharArrayReader(charArray), 0);
}
/* user method */
public void reset(char[] charArray, int newOffset) {
    reset(new CharArrayReader(charArray), newOffset);
}
/* user method */
public void reset(java.io.InputStream in) {
    reset(new java.io.InputStreamReader(in), 0);
}
/* user method */
public void reset(java.io.InputStream in, int newOffset) {
    reset(new java.io.InputStreamReader(in), newOffset);
}
/* user method */
public void reset(java.io.Reader in) {
    reset(in, 0);
}
/**
 * user method *
 *
 * Reset internal counters and vars to "newly created" values, in the hopes
 * that resetting a pre-existing tokenizer is faster than creating a new one.
 *
 * This method contains code blocks that were essentially duplicated from the
 * <em>generated</em> output of this specification before this method was
 * added.  Those code blocks were under the above copyright.
 */
public void reset(java.io.Reader in, int newOffset) {
    if (SSTokenizer.debugTokenizer) {
        System.out.println("resetting tokenizer");//$NON-NLS-1$
    }
    fOffset = newOffset;

    /* the input device */
    yy_reader = in;

    /* the current state of the DFA */
    yy_state = 0;

    /* the current lexical state */
    yy_lexical_state = YYINITIAL;

    /* this buffer contains the current text to be matched and is
    the source of the yytext() string */
    java.util.Arrays.fill(yy_buffer, (char)0);

    /* the textposition at the last accepting state */
    yy_markedPos = 0;

    /* the textposition at the last state to be included in yytext */
    //yy_pushbackPos = 0;

    /* the current text position in the buffer */
    yy_currentPos = 0;

    /* startRead marks the beginning of the yytext() string in the buffer */
    yy_startRead = 0;

    /** 
     * endRead marks the last character in the buffer, that has been read
     * from input 
     */
    yy_endRead = 0;

    /* number of newlines encountered up to the start of the matched text */
    //yyline = 0;

    /* the number of characters up to the start of the matched text */
    yychar = 0;

    /* yy_atEOF == true <=> the scanner has returned a value for EOF */
    yy_atEOF = false;

    /* denotes if the user-EOF-code has already been executed */
    yy_eof_done = false;


    /* user vars: */
    fTokenCount = 0;
 
    fShouldLoadBuffered = false;
    fBufferedContext = null;
    fBufferedStart = 1;
    fBufferedLength = 0;
    fStateStack = new IntStack();

    context = null;
    start = 0;
    textLength = 0;
    length = 0;
}

    /**
     * user method
     *
     */
    public BlockTokenizer newInstance() {
        SSTokenizer newInstance = new SSTokenizer();
        // global tagmarkers can be shared; they have no state and 
        // are never destroyed (e.g. 'release')
        for(int i = 0; i < fBlockMarkers.size(); i++) {
            BlockMarker blockMarker = (BlockMarker) fBlockMarkers.get(i);
            if(blockMarker.isGlobal())
                newInstance.addBlockMarker(blockMarker);
        }
        return newInstance;
    }
/* user method */
private final String scanXMLCommentText() throws IOException {
    // Scan for '-->' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_XML_COMMENT_END state and return the next
    //  context as usual.
    return doScan("-->", false, XML_COMMENT_TEXT, ST_XML_COMMENT_END, ST_XML_COMMENT_END);
}
/* user method */
private final String scanSSCommentText() throws IOException {
    // Scan for '--%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_COMMENT_END state and return the next
    //  context as usual.
    return doScan("--%>", false, SS_COMMENT_TEXT, ST_SS_COMMENT_END, ST_SS_COMMENT_END);
}
private final String scanSSConditionalText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_CONDITIONAL_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_CONDITIONAL_TEXT, ST_SS_CONDITIONAL_END, ST_SS_CONDITIONAL_END);
}
private final String scanSSRequirementText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_REQUIREMENT_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_REQUIREMENT_CONTENT, ST_SS_REQUIREMENT_END, ST_SS_REQUIREMENT_END);
}
private final String scanSSControlText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_CONTROL_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_CONTROL_CONTENT, ST_SS_CONTROL_END, ST_SS_CONTROL_END);
}
private final String scanSSi18nText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_I18N_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_I18N_CONTENT, ST_SS_I18N_END, ST_SS_I18N_END);
}
private final String scanSSWithText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_WITH_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_WITH_CONTENT, ST_SS_WITH_END, ST_SS_WITH_END);
}
private final String scanSSLoopText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_LOOP_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_LOOP_CONTENT, ST_SS_LOOP_END, ST_SS_LOOP_END);
}
private final String scanSSIncludeText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_INCLUDE_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_INCLUDE_CONTENT, ST_SS_INCLUDE_END, ST_SS_INCLUDE_END);
}
private final String scanSSCacheBlockText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_CACHEBLOCK_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_CACHEBLOCK_CONTENT, ST_SS_CACHEBLOCK_END, ST_SS_CACHEBLOCK_END);
}
private final String scanSSUncacheBlockText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_CACHEBLOCK_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_UNCACHED_CONTENT, ST_SS_UNCACHED_END, ST_SS_UNCACHED_END);
}
private final String scanSSTemplateFunctionText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_TEMPLATE_FUNCTION_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_TEMPLATE_FUNCTION_CONTENT, ST_SS_TEMPLATE_FUNCTION_END, ST_SS_TEMPLATE_FUNCTION_END);
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SSTokenizer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SSTokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the unpacked transition table
   */
  private static int [] yy_unpack(String packed) {
    int [] trans = new int[31980];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 10978) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return trans;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1380) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) return yy_buffer[yy_currentPos++];

    /* if the eof is reached, we don't need to work hard */ 
    if (yy_atEOF) return YYEOF;

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) return YYEOF;

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }

    
  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */
    yy_reader.close();
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }

  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning - from the SED JFlex skeleton
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    try {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[errorCode]);
    }
    catch (ArrayIndexOutOfBoundsException e) {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[YY_UNKNOWN_ERROR]);
    }
    // DO NOT EXIT the VM on an error
    // System.exit(1);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  void yypushback(int number) {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }

    /**
     * user method - skeleton.sed
     */
    protected final boolean containsTagName(char[] markerTagName, int offset, int tagnameLength) {
        for(int j = 0; j < fBlockMarkers.size(); j++) {
            BlockMarker marker = (BlockMarker)fBlockMarkers.get(j);
            if(marker.getTagName().length() == tagnameLength) {
                boolean matchesSoFar = true;
                for(int i = 0; i < tagnameLength && matchesSoFar; i++) {
                    if(marker.isCaseSensitive()) {
                        if(marker.getTagName().charAt(i) != markerTagName[i + offset])
                            matchesSoFar = false;
                    }
                    else {
                        if(Character.toLowerCase(marker.getTagName().charAt(i)) != Character.toLowerCase(markerTagName[i + offset]))
                            matchesSoFar = false;
                    }
                }
                if(matchesSoFar)
                    return true;
            }
        }
        return false;
    }

    /**
     * user method - skeleton.sed
     *
     * Return ALL of the regions scannable within the remaining text
     * Note: for verification use
     */
    public final List getRegions() {
        List tokens = new ArrayList();
        ITextRegion region = null;
        try {
            region = getNextToken();
            while(region != null) {
                if (region != null) {
                    tokens.add(region);
                }
                region = getNextToken();
            }
        }
        catch (StackOverflowError e) {
            Logger.logException(getClass().getName()+": input could not be tokenized correctly at position " + getOffset(), e);//$NON-NLS-1$
            throw e;
        }
        catch (Exception e) {
            // Since this is convenience method and NOT the recommended 
            // way of getting tokens, many errors are simply hidden
            Logger.logException("Exception not handled retrieving regions: " + e.getLocalizedMessage(), e);//$NON-NLS-1$
        }
        return tokens;
    }
    /**
     * user method - skeleton.sed
     */
    private final void dump(String s) {
        //if (Debug.debugTokenizer) {
            System.out.println(s + " (" + yychar + "-" + //$NON-NLS-2$//$NON-NLS-1$
                (yylength() + yychar) + "):\'" +//$NON-NLS-1$
                    StringUtils.escape(yytext()) + "\'");//$NON-NLS-1$
        //}
    }
    /* user method  - skeleton.sed */
    public final boolean isEOF() {
        return yy_atEOF;
    }
/* user method - skeleton.sed */
protected final boolean containsTagName(String markerTagName) {
    Iterator blocks = fBlockMarkers.iterator();
    while(blocks.hasNext()) {
        BlockMarker marker = (BlockMarker)blocks.next();
        if(marker.isCaseSensitive()) {
            if(marker.getTagName().equals(markerTagName))
                return true;
        }
        else {
            if(marker.getTagName().equalsIgnoreCase(markerTagName))
                return true;
        }
    }
    return false;
}

  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() {
    if (!yy_eof_done) {
      yy_eof_done = true;
    // do nothing, this is the downstream parser's job

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String primGetNextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;


    while (true) {

      yychar+= yylength();

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {
    
          yy_input = yy_advance();

          if ( yy_input == YYEOF ) break yy_forAction;

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 1) > 0 ) {
            yy_action = yy_state; 
            yy_markedPos = yy_currentPos; 
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }


      switch (yy_action) {    

        case 569: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("XSL processing instruction target");//$NON-NLS-1$
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 571: break;
        case 566: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe end uncache block");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_END_UNCACHED;
 }
        case 572: break;
        case 561: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe end_control");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_END_CONTROL;
 }
        case 573: break;
        case 557: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe end cache block");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_END_CACHEBLOCK;
 }
        case 574: break;
        case 547: 
        case 549: 
        case 550: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nCDATA start");//$NON-NLS-1$
    fStateStack.push(yystate());
    yybegin(ST_CDATA_TEXT);
    return XML_CDATA_OPEN;
 }
        case 575: break;
        case 546: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe uncached Start");//$NON-NLS-1$
    yybegin(ST_SS_CACHEBLOCK_CONTENT);
    return SS_UNCACHED_OPEN;
 }
        case 576: break;
        case 544: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe base_tag");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_BASE_TAG;
 }
        case 577: break;
        case 543: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe end_with");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_END_WITH;
 }
        case 578: break;
        case 539: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe end_loop");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_END_LOOP;
 }
        case 579: break;
        case 528: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe control Start");//$NON-NLS-1$
    yybegin(ST_SS_CONTROL_CONTENT);
    return SS_CONTROL_OPEN;
 }
        case 580: break;
        case 526: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe include Start");//$NON-NLS-1$
    yybegin(ST_SS_INCLUDE_CONTENT);
    return SS_INCLUDE_OPEN;
 }
        case 581: break;
        case 525: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe requirement Start");//$NON-NLS-1$
    yybegin(ST_SS_REQUIREMENT_CONTENT);
    return SS_REQUIREMENT_OPEN;
 }
        case 582: break;
        case 517: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("element");//$NON-NLS-1$
    yybegin(ST_XML_ELEMENT_DECLARATION);
    return XML_ELEMENT_DECLARATION;
 }
        case 583: break;
        case 516: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("attlist");//$NON-NLS-1$
    yybegin(ST_XML_ATTLIST_DECLARATION);
    return XML_ATTLIST_DECLARATION;
 }
        case 584: break;
        case 515: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("doctype");//$NON-NLS-1$
    yybegin(ST_XML_DOCTYPE_DECLARATION);
    return XML_DOCTYPE_DECLARATION;
 }
        case 585: break;
        case 496: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe cache block Start");//$NON-NLS-1$
    yybegin(ST_SS_CACHEBLOCK_CONTENT);
    return SS_CACHEBLOCK_OPEN;
 }
        case 586: break;
        case 487: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe end_if");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_END_IF;
 }
        case 587: break;
        case 482: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("doctype external id");//$NON-NLS-1$
    yybegin(ST_XML_DOCTYPE_ID_PUBLIC);
    return XML_DOCTYPE_EXTERNAL_ID_PUBLIC;
 }
        case 588: break;
        case 481: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("doctype external id");//$NON-NLS-1$
    yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
    return XML_DOCTYPE_EXTERNAL_ID_SYSTEM;
 }
        case 589: break;
        case 464: 
        case 507: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("DHTML processing instruction target");//$NON-NLS-1$
        yybegin(ST_DHTML_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 590: break;
        case 411: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe comment end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_COMMENT_CLOSE;
 }
        case 591: break;
        case 410: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe with Start");//$NON-NLS-1$
    yybegin(ST_SS_WITH_CONTENT);
    return SS_WITH_OPEN;
 }
        case 592: break;
        case 402: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe else");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_ELSE;
 }
        case 593: break;
        case 401: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe loop Start");//$NON-NLS-1$
    yybegin(ST_SS_LOOP_CONTENT);
    return SS_LOOP_OPEN;
 }
        case 594: break;
        case 374: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nCharRef");//$NON-NLS-1$
    return XML_CHAR_REFERENCE;
 }
        case 595: break;
        case 371: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\ncomment start");//$NON-NLS-1$
    yybegin(ST_XML_COMMENT);
    return XML_COMMENT_OPEN;
 }
        case 596: break;
        case 370: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe comment start");//$NON-NLS-1$
    yybegin(ST_SS_COMMENT);
    return SS_COMMENT_OPEN;
 }
        case 597: break;
        case 334: 
        case 335: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("XML processing instruction target");//$NON-NLS-1$
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 598: break;
        case 333: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("comment end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return XML_COMMENT_CLOSE;
 }
        case 599: break;
        case 332: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("CDATA end");//$NON-NLS-1$
    yybegin(fStateStack.pop());
    return XML_CDATA_CLOSE;
 }
        case 600: break;
        case 328: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nPEReference");//$NON-NLS-1$
    return XML_PE_REFERENCE;
 }
        case 601: break;
        case 325: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nEntityRef");//$NON-NLS-1$
    return XML_ENTITY_REFERENCE;
 }
        case 602: break;
        case 150: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("attlist close");//$NON-NLS-1$
    if (SSTokenizer.debugTokenizer) {
        if(fStateStack.peek()!=YYINITIAL)
            System.out.println("end embedded region");//$NON-NLS-1$
    }
    yybegin(fStateStack.pop());
    return XML_DECLARATION_CLOSE;
 }
        case 603: break;
        case 144: 
        case 146: 
        case 147: 
        case 286: 
        case 287: 
        case 290: 
        case 291: 
        case 356: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("attlist name");//$NON-NLS-1$
    yybegin(ST_XML_ATTLIST_DECLARATION_CONTENT);
    return XML_ATTLIST_DECL_NAME;
 }
        case 604: break;
        case 143: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("elementdecl close");//$NON-NLS-1$
    if (SSTokenizer.debugTokenizer) {
        if(fStateStack.peek()!=YYINITIAL)
            System.out.println("end embedded region");//$NON-NLS-1$
    }
    yybegin(fStateStack.pop());
    return XML_DECLARATION_CLOSE;
 }
        case 605: break;
        case 137: 
        case 139: 
        case 140: 
        case 275: 
        case 276: 
        case 279: 
        case 280: 
        case 352: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("elementdecl name");//$NON-NLS-1$
    yybegin(ST_XML_ELEMENT_DECLARATION_CONTENT);
    return XML_ELEMENT_DECL_NAME;
 }
        case 606: break;
        case 132: 
        case 134: 
        case 135: 
        case 136: 
        case 267: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("doctype system reference");//$NON-NLS-1$
    yybegin(ST_XML_DECLARATION_CLOSE);
    return XML_DOCTYPE_EXTERNAL_ID_SYSREF;
 }
        case 607: break;
        case 127: 
        case 129: 
        case 130: 
        case 131: 
        case 255: 
        case 256: 
        case 259: 
        case 260: 
        case 349: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("doctype public reference");//$NON-NLS-1$
    yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
    return XML_DOCTYPE_EXTERNAL_ID_PUBREF;
 }
        case 608: break;
        case 124: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("doctype type");//$NON-NLS-1$
    yybegin(ST_XML_DOCTYPE_EXTERNAL_ID);
    return XML_DOCTYPE_NAME;
 }
        case 609: break;
        case 119: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("declaration end");//$NON-NLS-1$
    if (SSTokenizer.debugTokenizer) {
        if(fStateStack.peek()!=YYINITIAL)
            System.out.println("end embedded region");//$NON-NLS-1$
    }
    yybegin(fStateStack.pop());
    return XML_DECLARATION_CLOSE;
 }
        case 610: break;
        case 111: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 239: 
        case 242: 
        case 243: 
        case 340: 
        case 341: 
        case 342: 
        case 387: 
        case 388: 
        case 389: 
        case 429: 
        case 431: 
        case 432: 
        case 434: 
        case 472: 
        case 473: 
        case 475: 
        case 476: 
        case 511: 
        case 513: 
        case 535: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("attr value");//$NON-NLS-1$
        yybegin(ST_XML_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 611: break;
        case 110: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("equals");//$NON-NLS-1$
        yybegin(ST_XML_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 612: break;
        case 108: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("attr name");//$NON-NLS-1$
        yybegin(ST_XML_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 613: break;
        case 103: 
        case 105: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("tag name");//$NON-NLS-1$
        yybegin(ST_XML_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 614: break;
        case 101: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("tag close");//$NON-NLS-1$
    if(isBlockMarker()) {
            yybegin(ST_BLOCK_TAG_SCAN);
    }
    else
            yybegin(YYINITIAL);
        return XML_TAG_CLOSE;
 }
        case 615: break;
        case 95: 
        case 97: 
        case 98: 
        case 230: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("DHTML processing instruction attribute value");//$NON-NLS-1$
        yybegin(ST_DHTML_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 616: break;
        case 94: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("DHTML processing instruction '='");//$NON-NLS-1$
        yybegin(ST_DHTML_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 617: break;
        case 92: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("DHTML processing instruction attribute name");//$NON-NLS-1$
        yybegin(ST_DHTML_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 618: break;
        case 90: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("DHTML processing instruction end");//$NON-NLS-1$
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 619: break;
        case 57: 
        case 206: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("non-reference %");//$NON-NLS-1$
    return XML_CONTENT;
 }
        case 620: break;
        case 56: 
        case 58: 
        case 59: 
        case 60: 
        case 65: 
        case 66: 
        case 70: 
        case 71: 
        case 81: 
        case 85: 
        case 89: 
        case 91: 
        case 93: 
        case 96: 
        case 102: 
        case 109: 
        case 112: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 125: 
        case 126: 
        case 128: 
        case 133: 
        case 138: 
        case 145: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 166: 
        case 169: 
        case 172: 
        case 175: 
        case 178: 
        case 181: 
        case 184: 
        case 187: 
        case 190: 
        case 193: 
        case 196: 
          { 
    if (SSTokenizer.debugTokenizer)
        System.out.println("!!!unexpected!!!: \"" + yytext() + "\":" + //$NON-NLS-2$//$NON-NLS-1$
            yychar + "-" + (yychar + yylength()));//$NON-NLS-1$
    return UNDEFINED;
 }
        case 621: break;
        case 55: 
        case 100: 
        case 118: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nstart tag open");//$NON-NLS-1$
        yybegin(ST_XML_TAG_NAME);
        return XML_TAG_OPEN;
 }
        case 622: break;
        case 29: 
        case 148: 
        case 149: 
        case 293: 
        case 358: 
        case 400: 
        case 441: 
        case 484: 
        case 519: 
        case 538: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("attlist contentspec");//$NON-NLS-1$
    return XML_ATTLIST_DECL_CONTENT;
 }
        case 623: break;
        case 27: 
        case 141: 
        case 142: 
        case 282: 
        case 354: 
        case 398: 
        case 440: 
        case 483: 
        case 518: 
        case 537: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("elementdecl contentspec");//$NON-NLS-1$
    return XML_ELEMENT_DECL_CONTENT;
 }
        case 624: break;
        case 16: 
        case 99: 
        case 104: 
        case 106: 
        case 107: 
        case 234: 
        case 235: 
        case 337: 
        case 338: 
        case 339: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 508: 
        case 509: 
        case 510: 
        case 534: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("inappropriate tag name");//$NON-NLS-1$
    yybegin(YYINITIAL);
        return XML_CONTENT;
 }
        case 625: break;
        case 5: 
        case 8: 
        case 9: 
        case 10: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 28: 
        case 72: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("white space");//$NON-NLS-1$
        return WHITE_SPACE;
 }
        case 626: break;
        case 0: 
        case 54: 
        case 202: 
        case 205: 
        case 322: 
        case 323: 
        case 324: 
        case 373: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nXML content");//$NON-NLS-1$
    return XML_CONTENT;
 }
        case 627: break;
        case 61: 
        case 62: 
        case 63: 
        case 64: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("CDATA text");//$NON-NLS-1$
    String blockContext = doBlockScan("]]>", XML_CDATA_TEXT, ST_CDATA_END);//$NON-NLS-1$
    if(blockContext == XML_CDATA_TEXT)
        yybegin(ST_CDATA_END);
    return blockContext;
 }
        case 628: break;
        case 67: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("LINE FEED");//$NON-NLS-1$
    return WHITE_SPACE;
 }
        case 629: break;
        case 68: 
        case 69: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("comment content");//$NON-NLS-1$
    return scanXMLCommentText();
 }
        case 630: break;
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 213: 
        case 214: 
        case 215: 
        case 336: 
        case 381: 
        case 382: 
        case 420: 
        case 421: 
        case 463: 
        case 506: 
        case 533: 
        case 548: 
        case 555: 
        case 560: 
        case 564: 
        case 567: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("processing instruction target");//$NON-NLS-1$
        yybegin(ST_PI_WS);
        return XML_TAG_NAME;
 }
        case 631: break;
        case 77: 
          { 
        yybegin(ST_PI_CONTENT);
        return WHITE_SPACE;
 }
        case 632: break;
        case 78: 
        case 79: 
        case 80: 
          { 
    // block scan until close is found
    return doScan("?>", false, XML_PI_CONTENT, ST_XML_PI_TAG_CLOSE, ST_XML_PI_TAG_CLOSE);
 }
        case 633: break;
        case 82: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("XML processing instruction attribute name");//$NON-NLS-1$
        yybegin(ST_XML_PI_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 634: break;
        case 83: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("XML processing instruction '='");//$NON-NLS-1$
        yybegin(ST_XML_PI_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 635: break;
        case 84: 
        case 86: 
        case 87: 
        case 88: 
        case 221: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("XML processing instruction attribute value");//$NON-NLS-1$
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 636: break;
        case 159: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe i18n start");//$NON-NLS-1$
    //yypushback(1);
    yybegin(ST_SS_I18N_CONTENT);
    return SS_I18N_OPEN;
 }
        case 637: break;
        case 164: 
        case 165: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe comment content");//$NON-NLS-1$
    return scanSSCommentText();
 }
        case 638: break;
        case 167: 
        case 168: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe conditional content");//$NON-NLS-1$
    return scanSSConditionalText();
 }
        case 639: break;
        case 170: 
        case 171: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe requirement content");//$NON-NLS-1$
    return scanSSRequirementText();
 }
        case 640: break;
        case 173: 
        case 174: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe control content");//$NON-NLS-1$
    return scanSSControlText();
 }
        case 641: break;
        case 176: 
        case 177: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe with content");//$NON-NLS-1$
    return scanSSWithText();
 }
        case 642: break;
        case 179: 
        case 180: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe loop content");//$NON-NLS-1$
    return scanSSLoopText();
 }
        case 643: break;
        case 182: 
        case 183: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe include content");//$NON-NLS-1$
    return scanSSIncludeText();
 }
        case 644: break;
        case 185: 
        case 186: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe template function content");//$NON-NLS-1$
    return scanSSTemplateFunctionText();
 }
        case 645: break;
        case 188: 
        case 189: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe cache block content");//$NON-NLS-1$
    return scanSSCacheBlockText();
 }
        case 646: break;
        case 191: 
        case 192: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe uncached content");//$NON-NLS-1$
    return scanSSUncacheBlockText();
 }
        case 647: break;
        case 194: 
        case 195: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe i18n content");//$NON-NLS-1$
    return scanSSi18nText();
 }
        case 648: break;
        case 197: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nend tag open");//$NON-NLS-1$
        yybegin(ST_XML_TAG_NAME);
        return XML_END_TAG_OPEN;
 }
        case 649: break;
        case 198: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nprocessing instruction start");//$NON-NLS-1$
    yybegin(ST_PI);
        return XML_PI_OPEN;
 }
        case 650: break;
        case 199: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe start");//$NON-NLS-1$
    yybegin(ST_SS);
    return SS_OPEN;
 }
        case 651: break;
        case 200: 
          { 
    fStateStack.push(yystate());
    if(SSTokenizer.debugTokenizer)
        dump("\ndeclaration start");//$NON-NLS-1$
        yybegin(ST_XML_DECLARATION);
    return XML_DECLARATION_OPEN;
 }
        case 652: break;
        case 204: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe end");//$NON-NLS-1$
    //yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 653: break;
        case 208: 
        case 378: 
        case 379: 
        case 418: 
        case 458: 
        case 460: 
        case 503: 
        case 504: 
        case 514: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe Variable");//$NON-NLS-1$.
    return SS_VARIABLE;
 }
        case 654: break;
        case 212: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("processing instruction end");//$NON-NLS-1$
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 655: break;
        case 216: 
          { 
        // ended with nothing inside
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 656: break;
        case 217: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("XML processing instruction end");//$NON-NLS-1$
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 657: break;
        case 233: 
          { 
        yybegin(YYINITIAL);
    if(SSTokenizer.debugTokenizer)
        dump("empty tag close");//$NON-NLS-1$
        return XML_EMPTY_TAG_CLOSE;
 }
        case 658: break;
        case 249: 
        case 263: 
        case 271: 
          { 
    return XML_DOCTYPE_INTERNAL_SUBSET;
 }
        case 659: break;
        case 295: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe template function Start");//$NON-NLS-1$
    yypushback(1);
    yybegin(ST_SS_TEMPLATE_FUNCTION_CONTENT);
    return SS_TEMPLATE_FUNCTION_OPEN;
 }
        case 660: break;
        case 296: 
          { 
    //if(SSTokenizer.debugTokenizer)
        dump("SilverStripe end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 661: break;
        case 302: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe conditional start");//$NON-NLS-1$
    yybegin(ST_SS_CONDITIONAL_CONTENT);
    return SS_CONDITIONAL_OPEN;
 }
        case 662: break;
        case 309: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe conditional end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 663: break;
        case 310: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe requirement end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 664: break;
        case 311: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe control end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 665: break;
        case 312: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe with end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 666: break;
        case 313: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe loop end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 667: break;
        case 314: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe include end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 668: break;
        case 315: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe template function end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 669: break;
        case 316: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe cache block end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 670: break;
        case 317: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe uncache end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 671: break;
        case 318: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe i18n end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 672: break;
        case 151: 
        case 152: 
          { 
        return doBlockTagScan();
     }
        case 673: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }    


}
